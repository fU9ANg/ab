// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pbBuffer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/pbBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pbBufferClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbBufferClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbBufferDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbBufferDB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fpbBuffer_2eproto() {
  protobuf_AddDesc_proto_2fpbBuffer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/pbBuffer.proto");
  GOOGLE_CHECK(file != NULL);
  pbBufferClient_descriptor_ = file->message_type(0);
  static const int pbBufferClient_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferClient, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferClient, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferClient, times_),
  };
  pbBufferClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbBufferClient_descriptor_,
      pbBufferClient::default_instance_,
      pbBufferClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbBufferClient));
  pbBufferDB_descriptor_ = file->message_type(1);
  static const int pbBufferDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferDB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferDB, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferDB, times_),
  };
  pbBufferDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbBufferDB_descriptor_,
      pbBufferDB::default_instance_,
      pbBufferDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBufferDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbBufferDB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fpbBuffer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbBufferClient_descriptor_, &pbBufferClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbBufferDB_descriptor_, &pbBufferDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fpbBuffer_2eproto() {
  delete pbBufferClient::default_instance_;
  delete pbBufferClient_reflection_;
  delete pbBufferDB::default_instance_;
  delete pbBufferDB_reflection_;
}

void protobuf_AddDesc_proto_2fpbBuffer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/pbBuffer.proto\">\n\016pbBufferClient"
    "\022\n\n\002Id\030\001 \002(\005\022\021\n\tStartTime\030\002 \002(\003\022\r\n\005Times"
    "\030\003 \003(\005\";\n\npbBufferDB\022\n\n\002Id\030\001 \002(\005\022\022\n\nExpi"
    "reTime\030\002 \002(\003\022\r\n\005Times\030\003 \003(\005", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/pbBuffer.proto", &protobuf_RegisterTypes);
  pbBufferClient::default_instance_ = new pbBufferClient();
  pbBufferDB::default_instance_ = new pbBufferDB();
  pbBufferClient::default_instance_->InitAsDefaultInstance();
  pbBufferDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fpbBuffer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fpbBuffer_2eproto {
  StaticDescriptorInitializer_proto_2fpbBuffer_2eproto() {
    protobuf_AddDesc_proto_2fpbBuffer_2eproto();
  }
} static_descriptor_initializer_proto_2fpbBuffer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pbBufferClient::kIdFieldNumber;
const int pbBufferClient::kStartTimeFieldNumber;
const int pbBufferClient::kTimesFieldNumber;
#endif  // !_MSC_VER

pbBufferClient::pbBufferClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbBufferClient::InitAsDefaultInstance() {
}

pbBufferClient::pbBufferClient(const pbBufferClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbBufferClient::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbBufferClient::~pbBufferClient() {
  SharedDtor();
}

void pbBufferClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbBufferClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbBufferClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbBufferClient_descriptor_;
}

const pbBufferClient& pbBufferClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbBuffer_2eproto();
  return *default_instance_;
}

pbBufferClient* pbBufferClient::default_instance_ = NULL;

pbBufferClient* pbBufferClient::New() const {
  return new pbBufferClient;
}

void pbBufferClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    starttime_ = GOOGLE_LONGLONG(0);
  }
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbBufferClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StartTime;
        break;
      }

      // required int64 StartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Times;
        break;
      }

      // repeated int32 Times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Times;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbBufferClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 StartTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // repeated int32 Times = 3;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbBufferClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 StartTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // repeated int32 Times = 3;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbBufferClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 StartTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

  }
  // repeated int32 Times = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->times(i));
    }
    total_size += 1 * this->times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbBufferClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbBufferClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbBufferClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbBufferClient::MergeFrom(const pbBufferClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbBufferClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbBufferClient::CopyFrom(const pbBufferClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbBufferClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pbBufferClient::Swap(pbBufferClient* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbBufferClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbBufferClient_descriptor_;
  metadata.reflection = pbBufferClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbBufferDB::kIdFieldNumber;
const int pbBufferDB::kExpireTimeFieldNumber;
const int pbBufferDB::kTimesFieldNumber;
#endif  // !_MSC_VER

pbBufferDB::pbBufferDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbBufferDB::InitAsDefaultInstance() {
}

pbBufferDB::pbBufferDB(const pbBufferDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbBufferDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  expiretime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbBufferDB::~pbBufferDB() {
  SharedDtor();
}

void pbBufferDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbBufferDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbBufferDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbBufferDB_descriptor_;
}

const pbBufferDB& pbBufferDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fpbBuffer_2eproto();
  return *default_instance_;
}

pbBufferDB* pbBufferDB::default_instance_ = NULL;

pbBufferDB* pbBufferDB::New() const {
  return new pbBufferDB;
}

void pbBufferDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    expiretime_ = GOOGLE_LONGLONG(0);
  }
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbBufferDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ExpireTime;
        break;
      }

      // required int64 ExpireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Times;
        break;
      }

      // repeated int32 Times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Times;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbBufferDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 ExpireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expiretime(), output);
  }

  // repeated int32 Times = 3;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbBufferDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 ExpireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expiretime(), target);
  }

  // repeated int32 Times = 3;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbBufferDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 ExpireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiretime());
    }

  }
  // repeated int32 Times = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->times(i));
    }
    total_size += 1 * this->times_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbBufferDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbBufferDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbBufferDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbBufferDB::MergeFrom(const pbBufferDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbBufferDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbBufferDB::CopyFrom(const pbBufferDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbBufferDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pbBufferDB::Swap(pbBufferDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expiretime_, other->expiretime_);
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbBufferDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbBufferDB_descriptor_;
  metadata.reflection = pbBufferDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
