// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ChenyuanTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ChenyuanTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ChenyuanTypes {

namespace {

const ::google::protobuf::Descriptor* PosSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PosSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentPropSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentPropSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentPropSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentPropSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentNodeSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentNodeSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentNodeSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentNodeSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntIntSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntIntSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntIntSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntIntSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceSerializeNet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSerializeNet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSerializeNet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fChenyuanTypes_2eproto() {
  protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/ChenyuanTypes.proto");
  GOOGLE_CHECK(file != NULL);
  PosSerializeDB_descriptor_ = file->message_type(0);
  static const int PosSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, y_),
  };
  PosSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosSerializeDB_descriptor_,
      PosSerializeDB::default_instance_,
      PosSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosSerializeDB));
  PosSerializeNet_descriptor_ = file->message_type(1);
  static const int PosSerializeNet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeNet, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeNet, y_),
  };
  PosSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosSerializeNet_descriptor_,
      PosSerializeNet::default_instance_,
      PosSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosSerializeNet));
  TalentPropSerializeDB_descriptor_ = file->message_type(2);
  static const int TalentPropSerializeDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, propval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, locked_),
  };
  TalentPropSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentPropSerializeDB_descriptor_,
      TalentPropSerializeDB::default_instance_,
      TalentPropSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentPropSerializeDB));
  TalentPropSerializeNet_descriptor_ = file->message_type(3);
  static const int TalentPropSerializeNet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeNet, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeNet, propval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeNet, locked_),
  };
  TalentPropSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentPropSerializeNet_descriptor_,
      TalentPropSerializeNet::default_instance_,
      TalentPropSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentPropSerializeNet));
  TalentNodeSerializeDB_descriptor_ = file->message_type(4);
  static const int TalentNodeSerializeDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, props_),
  };
  TalentNodeSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentNodeSerializeDB_descriptor_,
      TalentNodeSerializeDB::default_instance_,
      TalentNodeSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentNodeSerializeDB));
  TalentNodeSerializeNet_descriptor_ = file->message_type(5);
  static const int TalentNodeSerializeNet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeNet, props_),
  };
  TalentNodeSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentNodeSerializeNet_descriptor_,
      TalentNodeSerializeNet::default_instance_,
      TalentNodeSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentNodeSerializeNet));
  PlayerSerializeDB_descriptor_ = file->message_type(6);
  static const int PlayerSerializeDB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, spelllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, talentnodes_),
  };
  PlayerSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSerializeDB_descriptor_,
      PlayerSerializeDB::default_instance_,
      PlayerSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSerializeDB));
  PlayerSerializeNet_descriptor_ = file->message_type(7);
  static const int PlayerSerializeNet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, spelllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, talentnodes_),
  };
  PlayerSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSerializeNet_descriptor_,
      PlayerSerializeNet::default_instance_,
      PlayerSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSerializeNet));
  IntIntSerializeDB_descriptor_ = file->message_type(8);
  static const int IntIntSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeDB, int1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeDB, int2_),
  };
  IntIntSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntIntSerializeDB_descriptor_,
      IntIntSerializeDB::default_instance_,
      IntIntSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntIntSerializeDB));
  IntIntSerializeNet_descriptor_ = file->message_type(9);
  static const int IntIntSerializeNet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeNet, int1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeNet, int2_),
  };
  IntIntSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntIntSerializeNet_descriptor_,
      IntIntSerializeNet::default_instance_,
      IntIntSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntIntSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntIntSerializeNet));
  ResourceSerializeDB_descriptor_ = file->message_type(10);
  static const int ResourceSerializeDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeDB, id_),
  };
  ResourceSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceSerializeDB_descriptor_,
      ResourceSerializeDB::default_instance_,
      ResourceSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceSerializeDB));
  ResourceSerializeNet_descriptor_ = file->message_type(11);
  static const int ResourceSerializeNet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeNet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeNet, name_),
  };
  ResourceSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceSerializeNet_descriptor_,
      ResourceSerializeNet::default_instance_,
      ResourceSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceSerializeNet));
  ItemSerializeDB_descriptor_ = file->message_type(12);
  static const int ItemSerializeDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeDB, id_),
  };
  ItemSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSerializeDB_descriptor_,
      ItemSerializeDB::default_instance_,
      ItemSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSerializeDB));
  ItemSerializeNet_descriptor_ = file->message_type(13);
  static const int ItemSerializeNet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeNet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeNet, price_),
  };
  ItemSerializeNet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSerializeNet_descriptor_,
      ItemSerializeNet::default_instance_,
      ItemSerializeNet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeNet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSerializeNet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSerializeNet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fChenyuanTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosSerializeDB_descriptor_, &PosSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosSerializeNet_descriptor_, &PosSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentPropSerializeDB_descriptor_, &TalentPropSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentPropSerializeNet_descriptor_, &TalentPropSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentNodeSerializeDB_descriptor_, &TalentNodeSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentNodeSerializeNet_descriptor_, &TalentNodeSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSerializeDB_descriptor_, &PlayerSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSerializeNet_descriptor_, &PlayerSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntIntSerializeDB_descriptor_, &IntIntSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntIntSerializeNet_descriptor_, &IntIntSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceSerializeDB_descriptor_, &ResourceSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceSerializeNet_descriptor_, &ResourceSerializeNet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSerializeDB_descriptor_, &ItemSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSerializeNet_descriptor_, &ItemSerializeNet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fChenyuanTypes_2eproto() {
  delete PosSerializeDB::default_instance_;
  delete PosSerializeDB_reflection_;
  delete PosSerializeNet::default_instance_;
  delete PosSerializeNet_reflection_;
  delete TalentPropSerializeDB::default_instance_;
  delete TalentPropSerializeDB_reflection_;
  delete TalentPropSerializeNet::default_instance_;
  delete TalentPropSerializeNet_reflection_;
  delete TalentNodeSerializeDB::default_instance_;
  delete TalentNodeSerializeDB_reflection_;
  delete TalentNodeSerializeNet::default_instance_;
  delete TalentNodeSerializeNet_reflection_;
  delete PlayerSerializeDB::default_instance_;
  delete PlayerSerializeDB_reflection_;
  delete PlayerSerializeNet::default_instance_;
  delete PlayerSerializeNet_reflection_;
  delete IntIntSerializeDB::default_instance_;
  delete IntIntSerializeDB_reflection_;
  delete IntIntSerializeNet::default_instance_;
  delete IntIntSerializeNet_reflection_;
  delete ResourceSerializeDB::default_instance_;
  delete ResourceSerializeDB_reflection_;
  delete ResourceSerializeNet::default_instance_;
  delete ResourceSerializeNet_reflection_;
  delete ItemSerializeDB::default_instance_;
  delete ItemSerializeDB_reflection_;
  delete ItemSerializeNet::default_instance_;
  delete ItemSerializeNet_reflection_;
}

void protobuf_AddDesc_proto_2fChenyuanTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031proto/ChenyuanTypes.proto\022\rChenyuanTyp"
    "es\"&\n\016PosSerializeDB\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002"
    "(\005\"\'\n\017PosSerializeNet\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
    "\002(\005\"H\n\025TalentPropSerializeDB\022\016\n\006propid\030\001"
    " \002(\005\022\017\n\007propval\030\002 \002(\005\022\016\n\006locked\030\003 \002(\005\"I\n"
    "\026TalentPropSerializeNet\022\016\n\006propid\030\001 \002(\005\022"
    "\017\n\007propval\030\002 \002(\005\022\016\n\006locked\030\003 \002(\005\"L\n\025Tale"
    "ntNodeSerializeDB\0223\n\005props\030\001 \003(\0132$.Cheny"
    "uanTypes.TalentPropSerializeDB\"N\n\026Talent"
    "NodeSerializeNet\0224\n\005props\030\001 \003(\0132%.Chenyu"
    "anTypes.TalentPropSerializeNet\"\253\001\n\021Playe"
    "rSerializeDB\022\014\n\004name\030\001 \002(\t\022\016\n\006roleid\030\002 \002"
    "(\005\022*\n\003pos\030\003 \001(\0132\035.ChenyuanTypes.PosSeria"
    "lizeDB\022\021\n\tspelllist\030\004 \003(\005\0229\n\013talentnodes"
    "\030\005 \003(\0132$.ChenyuanTypes.TalentNodeSeriali"
    "zeDB\"\256\001\n\022PlayerSerializeNet\022\014\n\004name\030\001 \002("
    "\t\022\016\n\006roleid\030\002 \002(\005\022+\n\003pos\030\003 \001(\0132\036.Chenyua"
    "nTypes.PosSerializeNet\022\021\n\tspelllist\030\004 \003("
    "\005\022:\n\013talentnodes\030\005 \003(\0132%.ChenyuanTypes.T"
    "alentNodeSerializeNet\"/\n\021IntIntSerialize"
    "DB\022\014\n\004int1\030\001 \002(\005\022\014\n\004int2\030\002 \002(\005\"0\n\022IntInt"
    "SerializeNet\022\014\n\004int1\030\001 \002(\005\022\014\n\004int2\030\002 \002(\005"
    "\"!\n\023ResourceSerializeDB\022\n\n\002id\030\001 \002(\005\"0\n\024R"
    "esourceSerializeNet\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030"
    "\002 \002(\t\"\035\n\017ItemSerializeDB\022\n\n\002id\030\001 \002(\005\"-\n\020"
    "ItemSerializeNet\022\n\n\002id\030\001 \002(\005\022\r\n\005price\030\002 "
    "\002(\002", 1043);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ChenyuanTypes.proto", &protobuf_RegisterTypes);
  PosSerializeDB::default_instance_ = new PosSerializeDB();
  PosSerializeNet::default_instance_ = new PosSerializeNet();
  TalentPropSerializeDB::default_instance_ = new TalentPropSerializeDB();
  TalentPropSerializeNet::default_instance_ = new TalentPropSerializeNet();
  TalentNodeSerializeDB::default_instance_ = new TalentNodeSerializeDB();
  TalentNodeSerializeNet::default_instance_ = new TalentNodeSerializeNet();
  PlayerSerializeDB::default_instance_ = new PlayerSerializeDB();
  PlayerSerializeNet::default_instance_ = new PlayerSerializeNet();
  IntIntSerializeDB::default_instance_ = new IntIntSerializeDB();
  IntIntSerializeNet::default_instance_ = new IntIntSerializeNet();
  ResourceSerializeDB::default_instance_ = new ResourceSerializeDB();
  ResourceSerializeNet::default_instance_ = new ResourceSerializeNet();
  ItemSerializeDB::default_instance_ = new ItemSerializeDB();
  ItemSerializeNet::default_instance_ = new ItemSerializeNet();
  PosSerializeDB::default_instance_->InitAsDefaultInstance();
  PosSerializeNet::default_instance_->InitAsDefaultInstance();
  TalentPropSerializeDB::default_instance_->InitAsDefaultInstance();
  TalentPropSerializeNet::default_instance_->InitAsDefaultInstance();
  TalentNodeSerializeDB::default_instance_->InitAsDefaultInstance();
  TalentNodeSerializeNet::default_instance_->InitAsDefaultInstance();
  PlayerSerializeDB::default_instance_->InitAsDefaultInstance();
  PlayerSerializeNet::default_instance_->InitAsDefaultInstance();
  IntIntSerializeDB::default_instance_->InitAsDefaultInstance();
  IntIntSerializeNet::default_instance_->InitAsDefaultInstance();
  ResourceSerializeDB::default_instance_->InitAsDefaultInstance();
  ResourceSerializeNet::default_instance_->InitAsDefaultInstance();
  ItemSerializeDB::default_instance_->InitAsDefaultInstance();
  ItemSerializeNet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fChenyuanTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fChenyuanTypes_2eproto {
  StaticDescriptorInitializer_proto_2fChenyuanTypes_2eproto() {
    protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  }
} static_descriptor_initializer_proto_2fChenyuanTypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PosSerializeDB::kXFieldNumber;
const int PosSerializeDB::kYFieldNumber;
#endif  // !_MSC_VER

PosSerializeDB::PosSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosSerializeDB::InitAsDefaultInstance() {
}

PosSerializeDB::PosSerializeDB(const PosSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosSerializeDB::~PosSerializeDB() {
  SharedDtor();
}

void PosSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosSerializeDB_descriptor_;
}

const PosSerializeDB& PosSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PosSerializeDB* PosSerializeDB::default_instance_ = NULL;

PosSerializeDB* PosSerializeDB::New() const {
  return new PosSerializeDB;
}

void PosSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosSerializeDB::MergeFrom(const PosSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSerializeDB::CopyFrom(const PosSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PosSerializeDB::Swap(PosSerializeDB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosSerializeDB_descriptor_;
  metadata.reflection = PosSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PosSerializeNet::kXFieldNumber;
const int PosSerializeNet::kYFieldNumber;
#endif  // !_MSC_VER

PosSerializeNet::PosSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosSerializeNet::InitAsDefaultInstance() {
}

PosSerializeNet::PosSerializeNet(const PosSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosSerializeNet::~PosSerializeNet() {
  SharedDtor();
}

void PosSerializeNet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosSerializeNet_descriptor_;
}

const PosSerializeNet& PosSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PosSerializeNet* PosSerializeNet::default_instance_ = NULL;

PosSerializeNet* PosSerializeNet::New() const {
  return new PosSerializeNet;
}

void PosSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosSerializeNet::MergeFrom(const PosSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSerializeNet::CopyFrom(const PosSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PosSerializeNet::Swap(PosSerializeNet* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosSerializeNet_descriptor_;
  metadata.reflection = PosSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentPropSerializeDB::kPropidFieldNumber;
const int TalentPropSerializeDB::kPropvalFieldNumber;
const int TalentPropSerializeDB::kLockedFieldNumber;
#endif  // !_MSC_VER

TalentPropSerializeDB::TalentPropSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentPropSerializeDB::InitAsDefaultInstance() {
}

TalentPropSerializeDB::TalentPropSerializeDB(const TalentPropSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentPropSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0;
  propval_ = 0;
  locked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentPropSerializeDB::~TalentPropSerializeDB() {
  SharedDtor();
}

void TalentPropSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentPropSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentPropSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentPropSerializeDB_descriptor_;
}

const TalentPropSerializeDB& TalentPropSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentPropSerializeDB* TalentPropSerializeDB::default_instance_ = NULL;

TalentPropSerializeDB* TalentPropSerializeDB::New() const {
  return new TalentPropSerializeDB;
}

void TalentPropSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0;
    propval_ = 0;
    locked_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentPropSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 propid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propval;
        break;
      }

      // required int32 propval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propval_)));
          set_has_propval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locked;
        break;
      }

      // required int32 locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentPropSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 propid = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propid(), output);
  }

  // required int32 propval = 2;
  if (has_propval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propval(), output);
  }

  // required int32 locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentPropSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 propid = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propid(), target);
  }

  // required int32 propval = 2;
  if (has_propval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propval(), target);
  }

  // required int32 locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentPropSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 propid = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 propval = 2;
    if (has_propval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propval());
    }

    // required int32 locked = 3;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentPropSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentPropSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentPropSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentPropSerializeDB::MergeFrom(const TalentPropSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propval()) {
      set_propval(from.propval());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentPropSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentPropSerializeDB::CopyFrom(const TalentPropSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentPropSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalentPropSerializeDB::Swap(TalentPropSerializeDB* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(propval_, other->propval_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentPropSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentPropSerializeDB_descriptor_;
  metadata.reflection = TalentPropSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentPropSerializeNet::kPropidFieldNumber;
const int TalentPropSerializeNet::kPropvalFieldNumber;
const int TalentPropSerializeNet::kLockedFieldNumber;
#endif  // !_MSC_VER

TalentPropSerializeNet::TalentPropSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentPropSerializeNet::InitAsDefaultInstance() {
}

TalentPropSerializeNet::TalentPropSerializeNet(const TalentPropSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentPropSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0;
  propval_ = 0;
  locked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentPropSerializeNet::~TalentPropSerializeNet() {
  SharedDtor();
}

void TalentPropSerializeNet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentPropSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentPropSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentPropSerializeNet_descriptor_;
}

const TalentPropSerializeNet& TalentPropSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentPropSerializeNet* TalentPropSerializeNet::default_instance_ = NULL;

TalentPropSerializeNet* TalentPropSerializeNet::New() const {
  return new TalentPropSerializeNet;
}

void TalentPropSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0;
    propval_ = 0;
    locked_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentPropSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 propid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propval;
        break;
      }

      // required int32 propval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propval_)));
          set_has_propval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locked;
        break;
      }

      // required int32 locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentPropSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 propid = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propid(), output);
  }

  // required int32 propval = 2;
  if (has_propval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propval(), output);
  }

  // required int32 locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentPropSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 propid = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propid(), target);
  }

  // required int32 propval = 2;
  if (has_propval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propval(), target);
  }

  // required int32 locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentPropSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 propid = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 propval = 2;
    if (has_propval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propval());
    }

    // required int32 locked = 3;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentPropSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentPropSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentPropSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentPropSerializeNet::MergeFrom(const TalentPropSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propval()) {
      set_propval(from.propval());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentPropSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentPropSerializeNet::CopyFrom(const TalentPropSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentPropSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalentPropSerializeNet::Swap(TalentPropSerializeNet* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(propval_, other->propval_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentPropSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentPropSerializeNet_descriptor_;
  metadata.reflection = TalentPropSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentNodeSerializeDB::kPropsFieldNumber;
#endif  // !_MSC_VER

TalentNodeSerializeDB::TalentNodeSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentNodeSerializeDB::InitAsDefaultInstance() {
}

TalentNodeSerializeDB::TalentNodeSerializeDB(const TalentNodeSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentNodeSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentNodeSerializeDB::~TalentNodeSerializeDB() {
  SharedDtor();
}

void TalentNodeSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentNodeSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentNodeSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentNodeSerializeDB_descriptor_;
}

const TalentNodeSerializeDB& TalentNodeSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentNodeSerializeDB* TalentNodeSerializeDB::default_instance_ = NULL;

TalentNodeSerializeDB* TalentNodeSerializeDB::New() const {
  return new TalentNodeSerializeDB;
}

void TalentNodeSerializeDB::Clear() {
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentNodeSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChenyuanTypes.TalentPropSerializeDB props = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentNodeSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ChenyuanTypes.TalentPropSerializeDB props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentNodeSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ChenyuanTypes.TalentPropSerializeDB props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentNodeSerializeDB::ByteSize() const {
  int total_size = 0;

  // repeated .ChenyuanTypes.TalentPropSerializeDB props = 1;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentNodeSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentNodeSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentNodeSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentNodeSerializeDB::MergeFrom(const TalentNodeSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentNodeSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentNodeSerializeDB::CopyFrom(const TalentNodeSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentNodeSerializeDB::IsInitialized() const {

  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void TalentNodeSerializeDB::Swap(TalentNodeSerializeDB* other) {
  if (other != this) {
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentNodeSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentNodeSerializeDB_descriptor_;
  metadata.reflection = TalentNodeSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentNodeSerializeNet::kPropsFieldNumber;
#endif  // !_MSC_VER

TalentNodeSerializeNet::TalentNodeSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentNodeSerializeNet::InitAsDefaultInstance() {
}

TalentNodeSerializeNet::TalentNodeSerializeNet(const TalentNodeSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentNodeSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentNodeSerializeNet::~TalentNodeSerializeNet() {
  SharedDtor();
}

void TalentNodeSerializeNet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentNodeSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentNodeSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentNodeSerializeNet_descriptor_;
}

const TalentNodeSerializeNet& TalentNodeSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentNodeSerializeNet* TalentNodeSerializeNet::default_instance_ = NULL;

TalentNodeSerializeNet* TalentNodeSerializeNet::New() const {
  return new TalentNodeSerializeNet;
}

void TalentNodeSerializeNet::Clear() {
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentNodeSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChenyuanTypes.TalentPropSerializeNet props = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentNodeSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ChenyuanTypes.TalentPropSerializeNet props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentNodeSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ChenyuanTypes.TalentPropSerializeNet props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentNodeSerializeNet::ByteSize() const {
  int total_size = 0;

  // repeated .ChenyuanTypes.TalentPropSerializeNet props = 1;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentNodeSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentNodeSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentNodeSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentNodeSerializeNet::MergeFrom(const TalentNodeSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentNodeSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentNodeSerializeNet::CopyFrom(const TalentNodeSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentNodeSerializeNet::IsInitialized() const {

  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void TalentNodeSerializeNet::Swap(TalentNodeSerializeNet* other) {
  if (other != this) {
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentNodeSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentNodeSerializeNet_descriptor_;
  metadata.reflection = TalentNodeSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSerializeDB::kNameFieldNumber;
const int PlayerSerializeDB::kRoleidFieldNumber;
const int PlayerSerializeDB::kPosFieldNumber;
const int PlayerSerializeDB::kSpelllistFieldNumber;
const int PlayerSerializeDB::kTalentnodesFieldNumber;
#endif  // !_MSC_VER

PlayerSerializeDB::PlayerSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSerializeDB::InitAsDefaultInstance() {
  pos_ = const_cast< ::ChenyuanTypes::PosSerializeDB*>(&::ChenyuanTypes::PosSerializeDB::default_instance());
}

PlayerSerializeDB::PlayerSerializeDB(const PlayerSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSerializeDB::~PlayerSerializeDB() {
  SharedDtor();
}

void PlayerSerializeDB::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlayerSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSerializeDB_descriptor_;
}

const PlayerSerializeDB& PlayerSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PlayerSerializeDB* PlayerSerializeDB::default_instance_ = NULL;

PlayerSerializeDB* PlayerSerializeDB::New() const {
  return new PlayerSerializeDB;
}

void PlayerSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roleid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ChenyuanTypes::PosSerializeDB::Clear();
    }
  }
  spelllist_.Clear();
  talentnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .ChenyuanTypes.PosSerializeDB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spelllist;
        break;
      }

      // repeated int32 spelllist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spelllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_spelllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spelllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spelllist;
        if (input->ExpectTag(42)) goto parse_talentnodes;
        break;
      }

      // repeated .ChenyuanTypes.TalentNodeSerializeDB talentnodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talentnodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talentnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talentnodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional .ChenyuanTypes.PosSerializeDB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated int32 spelllist = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->spelllist(i), output);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB talentnodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->talentnodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional .ChenyuanTypes.PosSerializeDB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated int32 spelllist = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->spelllist(i), target);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB talentnodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->talentnodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .ChenyuanTypes.PosSerializeDB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated int32 spelllist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->spelllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spelllist(i));
    }
    total_size += 1 * this->spelllist_size() + data_size;
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB talentnodes = 5;
  total_size += 1 * this->talentnodes_size();
  for (int i = 0; i < this->talentnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talentnodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSerializeDB::MergeFrom(const PlayerSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  spelllist_.MergeFrom(from.spelllist_);
  talentnodes_.MergeFrom(from.talentnodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pos()) {
      mutable_pos()->::ChenyuanTypes::PosSerializeDB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSerializeDB::CopyFrom(const PlayerSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < talentnodes_size(); i++) {
    if (!this->talentnodes(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerSerializeDB::Swap(PlayerSerializeDB* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(roleid_, other->roleid_);
    std::swap(pos_, other->pos_);
    spelllist_.Swap(&other->spelllist_);
    talentnodes_.Swap(&other->talentnodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSerializeDB_descriptor_;
  metadata.reflection = PlayerSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSerializeNet::kNameFieldNumber;
const int PlayerSerializeNet::kRoleidFieldNumber;
const int PlayerSerializeNet::kPosFieldNumber;
const int PlayerSerializeNet::kSpelllistFieldNumber;
const int PlayerSerializeNet::kTalentnodesFieldNumber;
#endif  // !_MSC_VER

PlayerSerializeNet::PlayerSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSerializeNet::InitAsDefaultInstance() {
  pos_ = const_cast< ::ChenyuanTypes::PosSerializeNet*>(&::ChenyuanTypes::PosSerializeNet::default_instance());
}

PlayerSerializeNet::PlayerSerializeNet(const PlayerSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSerializeNet::~PlayerSerializeNet() {
  SharedDtor();
}

void PlayerSerializeNet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlayerSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSerializeNet_descriptor_;
}

const PlayerSerializeNet& PlayerSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PlayerSerializeNet* PlayerSerializeNet::default_instance_ = NULL;

PlayerSerializeNet* PlayerSerializeNet::New() const {
  return new PlayerSerializeNet;
}

void PlayerSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roleid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ChenyuanTypes::PosSerializeNet::Clear();
    }
  }
  spelllist_.Clear();
  talentnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // required int32 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .ChenyuanTypes.PosSerializeNet pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spelllist;
        break;
      }

      // repeated int32 spelllist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spelllist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_spelllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spelllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spelllist;
        if (input->ExpectTag(42)) goto parse_talentnodes;
        break;
      }

      // repeated .ChenyuanTypes.TalentNodeSerializeNet talentnodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talentnodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talentnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talentnodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional .ChenyuanTypes.PosSerializeNet pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated int32 spelllist = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->spelllist(i), output);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeNet talentnodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->talentnodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional .ChenyuanTypes.PosSerializeNet pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated int32 spelllist = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->spelllist(i), target);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeNet talentnodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->talentnodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .ChenyuanTypes.PosSerializeNet pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated int32 spelllist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->spelllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spelllist(i));
    }
    total_size += 1 * this->spelllist_size() + data_size;
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeNet talentnodes = 5;
  total_size += 1 * this->talentnodes_size();
  for (int i = 0; i < this->talentnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talentnodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSerializeNet::MergeFrom(const PlayerSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  spelllist_.MergeFrom(from.spelllist_);
  talentnodes_.MergeFrom(from.talentnodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pos()) {
      mutable_pos()->::ChenyuanTypes::PosSerializeNet::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSerializeNet::CopyFrom(const PlayerSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < talentnodes_size(); i++) {
    if (!this->talentnodes(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerSerializeNet::Swap(PlayerSerializeNet* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(roleid_, other->roleid_);
    std::swap(pos_, other->pos_);
    spelllist_.Swap(&other->spelllist_);
    talentnodes_.Swap(&other->talentnodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSerializeNet_descriptor_;
  metadata.reflection = PlayerSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntIntSerializeDB::kInt1FieldNumber;
const int IntIntSerializeDB::kInt2FieldNumber;
#endif  // !_MSC_VER

IntIntSerializeDB::IntIntSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntIntSerializeDB::InitAsDefaultInstance() {
}

IntIntSerializeDB::IntIntSerializeDB(const IntIntSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntIntSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  int1_ = 0;
  int2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntIntSerializeDB::~IntIntSerializeDB() {
  SharedDtor();
}

void IntIntSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntIntSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntIntSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntIntSerializeDB_descriptor_;
}

const IntIntSerializeDB& IntIntSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

IntIntSerializeDB* IntIntSerializeDB::default_instance_ = NULL;

IntIntSerializeDB* IntIntSerializeDB::New() const {
  return new IntIntSerializeDB;
}

void IntIntSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int1_ = 0;
    int2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntIntSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 int1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int1_)));
          set_has_int1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int2;
        break;
      }

      // required int32 int2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int2_)));
          set_has_int2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntIntSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 int1 = 1;
  if (has_int1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int1(), output);
  }

  // required int32 int2 = 2;
  if (has_int2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntIntSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 int1 = 1;
  if (has_int1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int1(), target);
  }

  // required int32 int2 = 2;
  if (has_int2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntIntSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 int1 = 1;
    if (has_int1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int1());
    }

    // required int32 int2 = 2;
    if (has_int2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntIntSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntIntSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntIntSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntIntSerializeDB::MergeFrom(const IntIntSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int1()) {
      set_int1(from.int1());
    }
    if (from.has_int2()) {
      set_int2(from.int2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntIntSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntIntSerializeDB::CopyFrom(const IntIntSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IntIntSerializeDB::Swap(IntIntSerializeDB* other) {
  if (other != this) {
    std::swap(int1_, other->int1_);
    std::swap(int2_, other->int2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntIntSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntIntSerializeDB_descriptor_;
  metadata.reflection = IntIntSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntIntSerializeNet::kInt1FieldNumber;
const int IntIntSerializeNet::kInt2FieldNumber;
#endif  // !_MSC_VER

IntIntSerializeNet::IntIntSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntIntSerializeNet::InitAsDefaultInstance() {
}

IntIntSerializeNet::IntIntSerializeNet(const IntIntSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntIntSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  int1_ = 0;
  int2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntIntSerializeNet::~IntIntSerializeNet() {
  SharedDtor();
}

void IntIntSerializeNet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntIntSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntIntSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntIntSerializeNet_descriptor_;
}

const IntIntSerializeNet& IntIntSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

IntIntSerializeNet* IntIntSerializeNet::default_instance_ = NULL;

IntIntSerializeNet* IntIntSerializeNet::New() const {
  return new IntIntSerializeNet;
}

void IntIntSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int1_ = 0;
    int2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntIntSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 int1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int1_)));
          set_has_int1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int2;
        break;
      }

      // required int32 int2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int2_)));
          set_has_int2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntIntSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 int1 = 1;
  if (has_int1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int1(), output);
  }

  // required int32 int2 = 2;
  if (has_int2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntIntSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 int1 = 1;
  if (has_int1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int1(), target);
  }

  // required int32 int2 = 2;
  if (has_int2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntIntSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 int1 = 1;
    if (has_int1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int1());
    }

    // required int32 int2 = 2;
    if (has_int2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntIntSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntIntSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntIntSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntIntSerializeNet::MergeFrom(const IntIntSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int1()) {
      set_int1(from.int1());
    }
    if (from.has_int2()) {
      set_int2(from.int2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntIntSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntIntSerializeNet::CopyFrom(const IntIntSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntIntSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IntIntSerializeNet::Swap(IntIntSerializeNet* other) {
  if (other != this) {
    std::swap(int1_, other->int1_);
    std::swap(int2_, other->int2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntIntSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntIntSerializeNet_descriptor_;
  metadata.reflection = IntIntSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceSerializeDB::kIdFieldNumber;
#endif  // !_MSC_VER

ResourceSerializeDB::ResourceSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceSerializeDB::InitAsDefaultInstance() {
}

ResourceSerializeDB::ResourceSerializeDB(const ResourceSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceSerializeDB::~ResourceSerializeDB() {
  SharedDtor();
}

void ResourceSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceSerializeDB_descriptor_;
}

const ResourceSerializeDB& ResourceSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

ResourceSerializeDB* ResourceSerializeDB::default_instance_ = NULL;

ResourceSerializeDB* ResourceSerializeDB::New() const {
  return new ResourceSerializeDB;
}

void ResourceSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceSerializeDB::MergeFrom(const ResourceSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSerializeDB::CopyFrom(const ResourceSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResourceSerializeDB::Swap(ResourceSerializeDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceSerializeDB_descriptor_;
  metadata.reflection = ResourceSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceSerializeNet::kIdFieldNumber;
const int ResourceSerializeNet::kNameFieldNumber;
#endif  // !_MSC_VER

ResourceSerializeNet::ResourceSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceSerializeNet::InitAsDefaultInstance() {
}

ResourceSerializeNet::ResourceSerializeNet(const ResourceSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceSerializeNet::~ResourceSerializeNet() {
  SharedDtor();
}

void ResourceSerializeNet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ResourceSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceSerializeNet_descriptor_;
}

const ResourceSerializeNet& ResourceSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

ResourceSerializeNet* ResourceSerializeNet::default_instance_ = NULL;

ResourceSerializeNet* ResourceSerializeNet::New() const {
  return new ResourceSerializeNet;
}

void ResourceSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceSerializeNet::MergeFrom(const ResourceSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSerializeNet::CopyFrom(const ResourceSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourceSerializeNet::Swap(ResourceSerializeNet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceSerializeNet_descriptor_;
  metadata.reflection = ResourceSerializeNet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSerializeDB::kIdFieldNumber;
#endif  // !_MSC_VER

ItemSerializeDB::ItemSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSerializeDB::InitAsDefaultInstance() {
}

ItemSerializeDB::ItemSerializeDB(const ItemSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSerializeDB::~ItemSerializeDB() {
  SharedDtor();
}

void ItemSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSerializeDB_descriptor_;
}

const ItemSerializeDB& ItemSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

ItemSerializeDB* ItemSerializeDB::default_instance_ = NULL;

ItemSerializeDB* ItemSerializeDB::New() const {
  return new ItemSerializeDB;
}

void ItemSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSerializeDB::MergeFrom(const ItemSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSerializeDB::CopyFrom(const ItemSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemSerializeDB::Swap(ItemSerializeDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSerializeDB_descriptor_;
  metadata.reflection = ItemSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSerializeNet::kIdFieldNumber;
const int ItemSerializeNet::kPriceFieldNumber;
#endif  // !_MSC_VER

ItemSerializeNet::ItemSerializeNet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSerializeNet::InitAsDefaultInstance() {
}

ItemSerializeNet::ItemSerializeNet(const ItemSerializeNet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSerializeNet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSerializeNet::~ItemSerializeNet() {
  SharedDtor();
}

void ItemSerializeNet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSerializeNet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSerializeNet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSerializeNet_descriptor_;
}

const ItemSerializeNet& ItemSerializeNet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

ItemSerializeNet* ItemSerializeNet::default_instance_ = NULL;

ItemSerializeNet* ItemSerializeNet::New() const {
  return new ItemSerializeNet;
}

void ItemSerializeNet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSerializeNet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_price;
        break;
      }

      // required float price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSerializeNet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSerializeNet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSerializeNet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float price = 2;
    if (has_price()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSerializeNet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSerializeNet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSerializeNet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSerializeNet::MergeFrom(const ItemSerializeNet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSerializeNet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSerializeNet::CopyFrom(const ItemSerializeNet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSerializeNet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemSerializeNet::Swap(ItemSerializeNet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSerializeNet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSerializeNet_descriptor_;
  metadata.reflection = ItemSerializeNet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChenyuanTypes

// @@protoc_insertion_point(global_scope)
