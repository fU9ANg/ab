// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SerializeBaseObject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/SerializeBaseObject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace content {

namespace {

const ::google::protobuf::Descriptor* tkPlayerSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tkPlayerSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* tkRoleSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tkRoleSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* tkCreatureSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tkCreatureSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* tkBufferSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tkBufferSerializeDB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto() {
  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/SerializeBaseObject.proto");
  GOOGLE_CHECK(file != NULL);
  tkPlayerSerializeDB_descriptor_ = file->message_type(0);
  static const int tkPlayerSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkPlayerSerializeDB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkPlayerSerializeDB, roles_),
  };
  tkPlayerSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tkPlayerSerializeDB_descriptor_,
      tkPlayerSerializeDB::default_instance_,
      tkPlayerSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkPlayerSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkPlayerSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tkPlayerSerializeDB));
  tkRoleSerializeDB_descriptor_ = file->message_type(1);
  static const int tkRoleSerializeDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkRoleSerializeDB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkRoleSerializeDB, creature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkRoleSerializeDB, buffer_),
  };
  tkRoleSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tkRoleSerializeDB_descriptor_,
      tkRoleSerializeDB::default_instance_,
      tkRoleSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkRoleSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkRoleSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tkRoleSerializeDB));
  tkCreatureSerializeDB_descriptor_ = file->message_type(2);
  static const int tkCreatureSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkCreatureSerializeDB, creatureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkCreatureSerializeDB, hp_),
  };
  tkCreatureSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tkCreatureSerializeDB_descriptor_,
      tkCreatureSerializeDB::default_instance_,
      tkCreatureSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkCreatureSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkCreatureSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tkCreatureSerializeDB));
  tkBufferSerializeDB_descriptor_ = file->message_type(3);
  static const int tkBufferSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkBufferSerializeDB, bufferid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkBufferSerializeDB, type_),
  };
  tkBufferSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tkBufferSerializeDB_descriptor_,
      tkBufferSerializeDB::default_instance_,
      tkBufferSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkBufferSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tkBufferSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tkBufferSerializeDB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tkPlayerSerializeDB_descriptor_, &tkPlayerSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tkRoleSerializeDB_descriptor_, &tkRoleSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tkCreatureSerializeDB_descriptor_, &tkCreatureSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tkBufferSerializeDB_descriptor_, &tkBufferSerializeDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto() {
  delete tkPlayerSerializeDB::default_instance_;
  delete tkPlayerSerializeDB_reflection_;
  delete tkRoleSerializeDB::default_instance_;
  delete tkRoleSerializeDB_reflection_;
  delete tkCreatureSerializeDB::default_instance_;
  delete tkCreatureSerializeDB_reflection_;
  delete tkBufferSerializeDB::default_instance_;
  delete tkBufferSerializeDB_reflection_;
}

void protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037proto/SerializeBaseObject.proto\022\007conte"
    "nt\"O\n\023tkPlayerSerializeDB\022\r\n\002id\030\001 \002(\005:\0011"
    "\022)\n\005roles\030\002 \003(\0132\032.content.tkRoleSerializ"
    "eDB\"\177\n\021tkRoleSerializeDB\022\n\n\002id\030\001 \002(\005\0220\n\010"
    "creature\030\002 \001(\0132\036.content.tkCreatureSeria"
    "lizeDB\022,\n\006buffer\030\003 \003(\0132\034.content.tkBuffe"
    "rSerializeDB\"7\n\025tkCreatureSerializeDB\022\022\n"
    "\ncreatureid\030\001 \002(\005\022\n\n\002hp\030\002 \002(\003\"5\n\023tkBuffe"
    "rSerializeDB\022\020\n\010bufferid\030\001 \002(\005\022\014\n\004type\030\002"
    " \002(\005", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/SerializeBaseObject.proto", &protobuf_RegisterTypes);
  tkPlayerSerializeDB::default_instance_ = new tkPlayerSerializeDB();
  tkRoleSerializeDB::default_instance_ = new tkRoleSerializeDB();
  tkCreatureSerializeDB::default_instance_ = new tkCreatureSerializeDB();
  tkBufferSerializeDB::default_instance_ = new tkBufferSerializeDB();
  tkPlayerSerializeDB::default_instance_->InitAsDefaultInstance();
  tkRoleSerializeDB::default_instance_->InitAsDefaultInstance();
  tkCreatureSerializeDB::default_instance_->InitAsDefaultInstance();
  tkBufferSerializeDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fSerializeBaseObject_2eproto {
  StaticDescriptorInitializer_proto_2fSerializeBaseObject_2eproto() {
    protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  }
} static_descriptor_initializer_proto_2fSerializeBaseObject_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tkPlayerSerializeDB::kIdFieldNumber;
const int tkPlayerSerializeDB::kRolesFieldNumber;
#endif  // !_MSC_VER

tkPlayerSerializeDB::tkPlayerSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tkPlayerSerializeDB::InitAsDefaultInstance() {
}

tkPlayerSerializeDB::tkPlayerSerializeDB(const tkPlayerSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tkPlayerSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tkPlayerSerializeDB::~tkPlayerSerializeDB() {
  SharedDtor();
}

void tkPlayerSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tkPlayerSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tkPlayerSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tkPlayerSerializeDB_descriptor_;
}

const tkPlayerSerializeDB& tkPlayerSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  return *default_instance_;
}

tkPlayerSerializeDB* tkPlayerSerializeDB::default_instance_ = NULL;

tkPlayerSerializeDB* tkPlayerSerializeDB::New() const {
  return new tkPlayerSerializeDB;
}

void tkPlayerSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 1;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tkPlayerSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .content.tkRoleSerializeDB roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tkPlayerSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .content.tkRoleSerializeDB roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tkPlayerSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .content.tkRoleSerializeDB roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tkPlayerSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .content.tkRoleSerializeDB roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tkPlayerSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tkPlayerSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tkPlayerSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tkPlayerSerializeDB::MergeFrom(const tkPlayerSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tkPlayerSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tkPlayerSerializeDB::CopyFrom(const tkPlayerSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tkPlayerSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void tkPlayerSerializeDB::Swap(tkPlayerSerializeDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tkPlayerSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tkPlayerSerializeDB_descriptor_;
  metadata.reflection = tkPlayerSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tkRoleSerializeDB::kIdFieldNumber;
const int tkRoleSerializeDB::kCreatureFieldNumber;
const int tkRoleSerializeDB::kBufferFieldNumber;
#endif  // !_MSC_VER

tkRoleSerializeDB::tkRoleSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tkRoleSerializeDB::InitAsDefaultInstance() {
  creature_ = const_cast< ::content::tkCreatureSerializeDB*>(&::content::tkCreatureSerializeDB::default_instance());
}

tkRoleSerializeDB::tkRoleSerializeDB(const tkRoleSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tkRoleSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  creature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tkRoleSerializeDB::~tkRoleSerializeDB() {
  SharedDtor();
}

void tkRoleSerializeDB::SharedDtor() {
  if (this != default_instance_) {
    delete creature_;
  }
}

void tkRoleSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tkRoleSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tkRoleSerializeDB_descriptor_;
}

const tkRoleSerializeDB& tkRoleSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  return *default_instance_;
}

tkRoleSerializeDB* tkRoleSerializeDB::default_instance_ = NULL;

tkRoleSerializeDB* tkRoleSerializeDB::New() const {
  return new tkRoleSerializeDB;
}

void tkRoleSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_creature()) {
      if (creature_ != NULL) creature_->::content::tkCreatureSerializeDB::Clear();
    }
  }
  buffer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tkRoleSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creature;
        break;
      }

      // optional .content.tkCreatureSerializeDB creature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buffer;
        break;
      }

      // repeated .content.tkBufferSerializeDB buffer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buffer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tkRoleSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .content.tkCreatureSerializeDB creature = 2;
  if (has_creature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creature(), output);
  }

  // repeated .content.tkBufferSerializeDB buffer = 3;
  for (int i = 0; i < this->buffer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buffer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tkRoleSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .content.tkCreatureSerializeDB creature = 2;
  if (has_creature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creature(), target);
  }

  // repeated .content.tkBufferSerializeDB buffer = 3;
  for (int i = 0; i < this->buffer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buffer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tkRoleSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .content.tkCreatureSerializeDB creature = 2;
    if (has_creature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creature());
    }

  }
  // repeated .content.tkBufferSerializeDB buffer = 3;
  total_size += 1 * this->buffer_size();
  for (int i = 0; i < this->buffer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tkRoleSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tkRoleSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tkRoleSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tkRoleSerializeDB::MergeFrom(const tkRoleSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffer_.MergeFrom(from.buffer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_creature()) {
      mutable_creature()->::content::tkCreatureSerializeDB::MergeFrom(from.creature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tkRoleSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tkRoleSerializeDB::CopyFrom(const tkRoleSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tkRoleSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_creature()) {
    if (!this->creature().IsInitialized()) return false;
  }
  for (int i = 0; i < buffer_size(); i++) {
    if (!this->buffer(i).IsInitialized()) return false;
  }
  return true;
}

void tkRoleSerializeDB::Swap(tkRoleSerializeDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(creature_, other->creature_);
    buffer_.Swap(&other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tkRoleSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tkRoleSerializeDB_descriptor_;
  metadata.reflection = tkRoleSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tkCreatureSerializeDB::kCreatureidFieldNumber;
const int tkCreatureSerializeDB::kHpFieldNumber;
#endif  // !_MSC_VER

tkCreatureSerializeDB::tkCreatureSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tkCreatureSerializeDB::InitAsDefaultInstance() {
}

tkCreatureSerializeDB::tkCreatureSerializeDB(const tkCreatureSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tkCreatureSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  creatureid_ = 0;
  hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tkCreatureSerializeDB::~tkCreatureSerializeDB() {
  SharedDtor();
}

void tkCreatureSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tkCreatureSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tkCreatureSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tkCreatureSerializeDB_descriptor_;
}

const tkCreatureSerializeDB& tkCreatureSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  return *default_instance_;
}

tkCreatureSerializeDB* tkCreatureSerializeDB::default_instance_ = NULL;

tkCreatureSerializeDB* tkCreatureSerializeDB::New() const {
  return new tkCreatureSerializeDB;
}

void tkCreatureSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creatureid_ = 0;
    hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tkCreatureSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 creatureid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creatureid_)));
          set_has_creatureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required int64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tkCreatureSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 creatureid = 1;
  if (has_creatureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->creatureid(), output);
  }

  // required int64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tkCreatureSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 creatureid = 1;
  if (has_creatureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->creatureid(), target);
  }

  // required int64 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tkCreatureSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 creatureid = 1;
    if (has_creatureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creatureid());
    }

    // required int64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tkCreatureSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tkCreatureSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tkCreatureSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tkCreatureSerializeDB::MergeFrom(const tkCreatureSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creatureid()) {
      set_creatureid(from.creatureid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tkCreatureSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tkCreatureSerializeDB::CopyFrom(const tkCreatureSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tkCreatureSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tkCreatureSerializeDB::Swap(tkCreatureSerializeDB* other) {
  if (other != this) {
    std::swap(creatureid_, other->creatureid_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tkCreatureSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tkCreatureSerializeDB_descriptor_;
  metadata.reflection = tkCreatureSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tkBufferSerializeDB::kBufferidFieldNumber;
const int tkBufferSerializeDB::kTypeFieldNumber;
#endif  // !_MSC_VER

tkBufferSerializeDB::tkBufferSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tkBufferSerializeDB::InitAsDefaultInstance() {
}

tkBufferSerializeDB::tkBufferSerializeDB(const tkBufferSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tkBufferSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  bufferid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tkBufferSerializeDB::~tkBufferSerializeDB() {
  SharedDtor();
}

void tkBufferSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tkBufferSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tkBufferSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tkBufferSerializeDB_descriptor_;
}

const tkBufferSerializeDB& tkBufferSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  return *default_instance_;
}

tkBufferSerializeDB* tkBufferSerializeDB::default_instance_ = NULL;

tkBufferSerializeDB* tkBufferSerializeDB::New() const {
  return new tkBufferSerializeDB;
}

void tkBufferSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bufferid_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tkBufferSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bufferid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tkBufferSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bufferid = 1;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bufferid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tkBufferSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bufferid = 1;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bufferid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tkBufferSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bufferid = 1;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufferid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tkBufferSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tkBufferSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tkBufferSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tkBufferSerializeDB::MergeFrom(const tkBufferSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tkBufferSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tkBufferSerializeDB::CopyFrom(const tkBufferSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tkBufferSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tkBufferSerializeDB::Swap(tkBufferSerializeDB* other) {
  if (other != this) {
    std::swap(bufferid_, other->bufferid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tkBufferSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tkBufferSerializeDB_descriptor_;
  metadata.reflection = tkBufferSerializeDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
