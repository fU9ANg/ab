// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/pbSpell.proto

#ifndef PROTOBUF_proto_2fpbSpell_2eproto__INCLUDED
#define PROTOBUF_proto_2fpbSpell_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fpbSpell_2eproto();
void protobuf_AssignDesc_proto_2fpbSpell_2eproto();
void protobuf_ShutdownFile_proto_2fpbSpell_2eproto();

class pbSpellClient;
class pbSpellDB;

// ===================================================================

class pbSpellClient : public ::google::protobuf::Message {
 public:
  pbSpellClient();
  virtual ~pbSpellClient();

  pbSpellClient(const pbSpellClient& from);

  inline pbSpellClient& operator=(const pbSpellClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pbSpellClient& default_instance();

  void Swap(pbSpellClient* other);

  // implements Message ----------------------------------------------

  pbSpellClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pbSpellClient& from);
  void MergeFrom(const pbSpellClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 CastTime = 3;
  inline bool has_casttime() const;
  inline void clear_casttime();
  static const int kCastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 casttime() const;
  inline void set_casttime(::google::protobuf::int32 value);

  // required int32 CDTime = 4;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCDTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cdtime() const;
  inline void set_cdtime(::google::protobuf::int32 value);

  // required int32 CostMp = 5;
  inline bool has_costmp() const;
  inline void clear_costmp();
  static const int kCostMpFieldNumber = 5;
  inline ::google::protobuf::int32 costmp() const;
  inline void set_costmp(::google::protobuf::int32 value);

  // required int32 UseTime = 6;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 6;
  inline ::google::protobuf::int32 usetime() const;
  inline void set_usetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbSpellClient)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_casttime();
  inline void clear_has_casttime();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_costmp();
  inline void clear_has_costmp();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 casttime_;
  ::google::protobuf::int32 cdtime_;
  ::google::protobuf::int32 costmp_;
  ::google::protobuf::int32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fpbSpell_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbSpell_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbSpell_2eproto();

  void InitAsDefaultInstance();
  static pbSpellClient* default_instance_;
};
// -------------------------------------------------------------------

class pbSpellDB : public ::google::protobuf::Message {
 public:
  pbSpellDB();
  virtual ~pbSpellDB();

  pbSpellDB(const pbSpellDB& from);

  inline pbSpellDB& operator=(const pbSpellDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pbSpellDB& default_instance();

  void Swap(pbSpellDB* other);

  // implements Message ----------------------------------------------

  pbSpellDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pbSpellDB& from);
  void MergeFrom(const pbSpellDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 CastTime = 3;
  inline bool has_casttime() const;
  inline void clear_casttime();
  static const int kCastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 casttime() const;
  inline void set_casttime(::google::protobuf::int32 value);

  // required int32 CDTime = 4;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCDTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cdtime() const;
  inline void set_cdtime(::google::protobuf::int32 value);

  // required int32 CostMp = 5;
  inline bool has_costmp() const;
  inline void clear_costmp();
  static const int kCostMpFieldNumber = 5;
  inline ::google::protobuf::int32 costmp() const;
  inline void set_costmp(::google::protobuf::int32 value);

  // required int64 LastCastTime = 6;
  inline bool has_lastcasttime() const;
  inline void clear_lastcasttime();
  static const int kLastCastTimeFieldNumber = 6;
  inline ::google::protobuf::int64 lastcasttime() const;
  inline void set_lastcasttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pbSpellDB)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_casttime();
  inline void clear_has_casttime();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_costmp();
  inline void clear_has_costmp();
  inline void set_has_lastcasttime();
  inline void clear_has_lastcasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 casttime_;
  ::google::protobuf::int32 cdtime_;
  ::google::protobuf::int32 costmp_;
  ::google::protobuf::int64 lastcasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fpbSpell_2eproto();
  friend void protobuf_AssignDesc_proto_2fpbSpell_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpbSpell_2eproto();

  void InitAsDefaultInstance();
  static pbSpellDB* default_instance_;
};
// ===================================================================


// ===================================================================

// pbSpellClient

// required int32 Id = 1;
inline bool pbSpellClient::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbSpellClient::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pbSpellClient::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pbSpellClient::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pbSpellClient::id() const {
  return id_;
}
inline void pbSpellClient::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string Name = 2;
inline bool pbSpellClient::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbSpellClient::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pbSpellClient::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pbSpellClient::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pbSpellClient::name() const {
  return *name_;
}
inline void pbSpellClient::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pbSpellClient::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pbSpellClient::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pbSpellClient::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pbSpellClient::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pbSpellClient::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 CastTime = 3;
inline bool pbSpellClient::has_casttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbSpellClient::set_has_casttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pbSpellClient::clear_has_casttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pbSpellClient::clear_casttime() {
  casttime_ = 0;
  clear_has_casttime();
}
inline ::google::protobuf::int32 pbSpellClient::casttime() const {
  return casttime_;
}
inline void pbSpellClient::set_casttime(::google::protobuf::int32 value) {
  set_has_casttime();
  casttime_ = value;
}

// required int32 CDTime = 4;
inline bool pbSpellClient::has_cdtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbSpellClient::set_has_cdtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pbSpellClient::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pbSpellClient::clear_cdtime() {
  cdtime_ = 0;
  clear_has_cdtime();
}
inline ::google::protobuf::int32 pbSpellClient::cdtime() const {
  return cdtime_;
}
inline void pbSpellClient::set_cdtime(::google::protobuf::int32 value) {
  set_has_cdtime();
  cdtime_ = value;
}

// required int32 CostMp = 5;
inline bool pbSpellClient::has_costmp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pbSpellClient::set_has_costmp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pbSpellClient::clear_has_costmp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pbSpellClient::clear_costmp() {
  costmp_ = 0;
  clear_has_costmp();
}
inline ::google::protobuf::int32 pbSpellClient::costmp() const {
  return costmp_;
}
inline void pbSpellClient::set_costmp(::google::protobuf::int32 value) {
  set_has_costmp();
  costmp_ = value;
}

// required int32 UseTime = 6;
inline bool pbSpellClient::has_usetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pbSpellClient::set_has_usetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pbSpellClient::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pbSpellClient::clear_usetime() {
  usetime_ = 0;
  clear_has_usetime();
}
inline ::google::protobuf::int32 pbSpellClient::usetime() const {
  return usetime_;
}
inline void pbSpellClient::set_usetime(::google::protobuf::int32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// pbSpellDB

// required int32 Id = 1;
inline bool pbSpellDB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbSpellDB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pbSpellDB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pbSpellDB::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pbSpellDB::id() const {
  return id_;
}
inline void pbSpellDB::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string Name = 2;
inline bool pbSpellDB::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbSpellDB::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pbSpellDB::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pbSpellDB::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& pbSpellDB::name() const {
  return *name_;
}
inline void pbSpellDB::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pbSpellDB::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void pbSpellDB::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pbSpellDB::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* pbSpellDB::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pbSpellDB::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 CastTime = 3;
inline bool pbSpellDB::has_casttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbSpellDB::set_has_casttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pbSpellDB::clear_has_casttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pbSpellDB::clear_casttime() {
  casttime_ = 0;
  clear_has_casttime();
}
inline ::google::protobuf::int32 pbSpellDB::casttime() const {
  return casttime_;
}
inline void pbSpellDB::set_casttime(::google::protobuf::int32 value) {
  set_has_casttime();
  casttime_ = value;
}

// required int32 CDTime = 4;
inline bool pbSpellDB::has_cdtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbSpellDB::set_has_cdtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pbSpellDB::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pbSpellDB::clear_cdtime() {
  cdtime_ = 0;
  clear_has_cdtime();
}
inline ::google::protobuf::int32 pbSpellDB::cdtime() const {
  return cdtime_;
}
inline void pbSpellDB::set_cdtime(::google::protobuf::int32 value) {
  set_has_cdtime();
  cdtime_ = value;
}

// required int32 CostMp = 5;
inline bool pbSpellDB::has_costmp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pbSpellDB::set_has_costmp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pbSpellDB::clear_has_costmp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pbSpellDB::clear_costmp() {
  costmp_ = 0;
  clear_has_costmp();
}
inline ::google::protobuf::int32 pbSpellDB::costmp() const {
  return costmp_;
}
inline void pbSpellDB::set_costmp(::google::protobuf::int32 value) {
  set_has_costmp();
  costmp_ = value;
}

// required int64 LastCastTime = 6;
inline bool pbSpellDB::has_lastcasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pbSpellDB::set_has_lastcasttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pbSpellDB::clear_has_lastcasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pbSpellDB::clear_lastcasttime() {
  lastcasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lastcasttime();
}
inline ::google::protobuf::int64 pbSpellDB::lastcasttime() const {
  return lastcasttime_;
}
inline void pbSpellDB::set_lastcasttime(::google::protobuf::int64 value) {
  set_has_lastcasttime();
  lastcasttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fpbSpell_2eproto__INCLUDED
