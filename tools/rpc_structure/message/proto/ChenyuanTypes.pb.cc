// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ChenyuanTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ChenyuanTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ChenyuanTypes {

namespace {

const ::google::protobuf::Descriptor* PosSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PosSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentPropSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentPropSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalentNodeSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalentNodeSerializeDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSerializeDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSerializeDB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fChenyuanTypes_2eproto() {
  protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/ChenyuanTypes.proto");
  GOOGLE_CHECK(file != NULL);
  PosSerializeDB_descriptor_ = file->message_type(0);
  static const int PosSerializeDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, y_),
  };
  PosSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PosSerializeDB_descriptor_,
      PosSerializeDB::default_instance_,
      PosSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PosSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PosSerializeDB));
  TalentPropSerializeDB_descriptor_ = file->message_type(1);
  static const int TalentPropSerializeDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, propval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, locked_),
  };
  TalentPropSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentPropSerializeDB_descriptor_,
      TalentPropSerializeDB::default_instance_,
      TalentPropSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentPropSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentPropSerializeDB));
  TalentNodeSerializeDB_descriptor_ = file->message_type(2);
  static const int TalentNodeSerializeDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, props_),
  };
  TalentNodeSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalentNodeSerializeDB_descriptor_,
      TalentNodeSerializeDB::default_instance_,
      TalentNodeSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalentNodeSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalentNodeSerializeDB));
  PlayerSerializeDB_descriptor_ = file->message_type(3);
  static const int PlayerSerializeDB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, spelllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, talentnodes_),
  };
  PlayerSerializeDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSerializeDB_descriptor_,
      PlayerSerializeDB::default_instance_,
      PlayerSerializeDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSerializeDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSerializeDB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fChenyuanTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PosSerializeDB_descriptor_, &PosSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentPropSerializeDB_descriptor_, &TalentPropSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalentNodeSerializeDB_descriptor_, &TalentNodeSerializeDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSerializeDB_descriptor_, &PlayerSerializeDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fChenyuanTypes_2eproto() {
  delete PosSerializeDB::default_instance_;
  delete PosSerializeDB_reflection_;
  delete TalentPropSerializeDB::default_instance_;
  delete TalentPropSerializeDB_reflection_;
  delete TalentNodeSerializeDB::default_instance_;
  delete TalentNodeSerializeDB_reflection_;
  delete PlayerSerializeDB::default_instance_;
  delete PlayerSerializeDB_reflection_;
}

void protobuf_AddDesc_proto_2fChenyuanTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031proto/ChenyuanTypes.proto\022\rChenyuanTyp"
    "es\"&\n\016PosSerializeDB\022\t\n\001X\030\001 \002(\005\022\t\n\001Y\030\002 \002"
    "(\005\"H\n\025TalentPropSerializeDB\022\016\n\006PropId\030\001 "
    "\002(\005\022\017\n\007PropVal\030\002 \002(\005\022\016\n\006Locked\030\003 \002(\005\"L\n\025"
    "TalentNodeSerializeDB\0223\n\005Props\030\001 \003(\0132$.C"
    "henyuanTypes.TalentPropSerializeDB\"\253\001\n\021P"
    "layerSerializeDB\022\014\n\004Name\030\001 \002(\t\022\016\n\006RoleId"
    "\030\002 \002(\005\022*\n\003Pos\030\003 \001(\0132\035.ChenyuanTypes.PosS"
    "erializeDB\022\021\n\tSpellList\030\004 \003(\005\0229\n\013TalentN"
    "odes\030\005 \003(\0132$.ChenyuanTypes.TalentNodeSer"
    "ializeDB", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ChenyuanTypes.proto", &protobuf_RegisterTypes);
  PosSerializeDB::default_instance_ = new PosSerializeDB();
  TalentPropSerializeDB::default_instance_ = new TalentPropSerializeDB();
  TalentNodeSerializeDB::default_instance_ = new TalentNodeSerializeDB();
  PlayerSerializeDB::default_instance_ = new PlayerSerializeDB();
  PosSerializeDB::default_instance_->InitAsDefaultInstance();
  TalentPropSerializeDB::default_instance_->InitAsDefaultInstance();
  TalentNodeSerializeDB::default_instance_->InitAsDefaultInstance();
  PlayerSerializeDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fChenyuanTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fChenyuanTypes_2eproto {
  StaticDescriptorInitializer_proto_2fChenyuanTypes_2eproto() {
    protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  }
} static_descriptor_initializer_proto_2fChenyuanTypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PosSerializeDB::kXFieldNumber;
const int PosSerializeDB::kYFieldNumber;
#endif  // !_MSC_VER

PosSerializeDB::PosSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PosSerializeDB::InitAsDefaultInstance() {
}

PosSerializeDB::PosSerializeDB(const PosSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PosSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PosSerializeDB::~PosSerializeDB() {
  SharedDtor();
}

void PosSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PosSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PosSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PosSerializeDB_descriptor_;
}

const PosSerializeDB& PosSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PosSerializeDB* PosSerializeDB::default_instance_ = NULL;

PosSerializeDB* PosSerializeDB::New() const {
  return new PosSerializeDB;
}

void PosSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PosSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // required int32 Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PosSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PosSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PosSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PosSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PosSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PosSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PosSerializeDB::MergeFrom(const PosSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PosSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSerializeDB::CopyFrom(const PosSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PosSerializeDB::Swap(PosSerializeDB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PosSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PosSerializeDB_descriptor_;
  metadata.reflection = PosSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentPropSerializeDB::kPropIdFieldNumber;
const int TalentPropSerializeDB::kPropValFieldNumber;
const int TalentPropSerializeDB::kLockedFieldNumber;
#endif  // !_MSC_VER

TalentPropSerializeDB::TalentPropSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentPropSerializeDB::InitAsDefaultInstance() {
}

TalentPropSerializeDB::TalentPropSerializeDB(const TalentPropSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentPropSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0;
  propval_ = 0;
  locked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentPropSerializeDB::~TalentPropSerializeDB() {
  SharedDtor();
}

void TalentPropSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentPropSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentPropSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentPropSerializeDB_descriptor_;
}

const TalentPropSerializeDB& TalentPropSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentPropSerializeDB* TalentPropSerializeDB::default_instance_ = NULL;

TalentPropSerializeDB* TalentPropSerializeDB::New() const {
  return new TalentPropSerializeDB;
}

void TalentPropSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0;
    propval_ = 0;
    locked_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentPropSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PropId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PropVal;
        break;
      }

      // required int32 PropVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PropVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propval_)));
          set_has_propval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Locked;
        break;
      }

      // required int32 Locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentPropSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PropId = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propid(), output);
  }

  // required int32 PropVal = 2;
  if (has_propval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propval(), output);
  }

  // required int32 Locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentPropSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PropId = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propid(), target);
  }

  // required int32 PropVal = 2;
  if (has_propval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propval(), target);
  }

  // required int32 Locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentPropSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PropId = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 PropVal = 2;
    if (has_propval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propval());
    }

    // required int32 Locked = 3;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentPropSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentPropSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentPropSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentPropSerializeDB::MergeFrom(const TalentPropSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propval()) {
      set_propval(from.propval());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentPropSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentPropSerializeDB::CopyFrom(const TalentPropSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentPropSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalentPropSerializeDB::Swap(TalentPropSerializeDB* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(propval_, other->propval_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentPropSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentPropSerializeDB_descriptor_;
  metadata.reflection = TalentPropSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalentNodeSerializeDB::kPropsFieldNumber;
#endif  // !_MSC_VER

TalentNodeSerializeDB::TalentNodeSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalentNodeSerializeDB::InitAsDefaultInstance() {
}

TalentNodeSerializeDB::TalentNodeSerializeDB(const TalentNodeSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalentNodeSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalentNodeSerializeDB::~TalentNodeSerializeDB() {
  SharedDtor();
}

void TalentNodeSerializeDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalentNodeSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalentNodeSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalentNodeSerializeDB_descriptor_;
}

const TalentNodeSerializeDB& TalentNodeSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

TalentNodeSerializeDB* TalentNodeSerializeDB::default_instance_ = NULL;

TalentNodeSerializeDB* TalentNodeSerializeDB::New() const {
  return new TalentNodeSerializeDB;
}

void TalentNodeSerializeDB::Clear() {
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalentNodeSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChenyuanTypes.TalentPropSerializeDB Props = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Props;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalentNodeSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ChenyuanTypes.TalentPropSerializeDB Props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalentNodeSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ChenyuanTypes.TalentPropSerializeDB Props = 1;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalentNodeSerializeDB::ByteSize() const {
  int total_size = 0;

  // repeated .ChenyuanTypes.TalentPropSerializeDB Props = 1;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalentNodeSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalentNodeSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalentNodeSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalentNodeSerializeDB::MergeFrom(const TalentNodeSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalentNodeSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalentNodeSerializeDB::CopyFrom(const TalentNodeSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalentNodeSerializeDB::IsInitialized() const {

  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void TalentNodeSerializeDB::Swap(TalentNodeSerializeDB* other) {
  if (other != this) {
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalentNodeSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalentNodeSerializeDB_descriptor_;
  metadata.reflection = TalentNodeSerializeDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSerializeDB::kNameFieldNumber;
const int PlayerSerializeDB::kRoleIdFieldNumber;
const int PlayerSerializeDB::kPosFieldNumber;
const int PlayerSerializeDB::kSpellListFieldNumber;
const int PlayerSerializeDB::kTalentNodesFieldNumber;
#endif  // !_MSC_VER

PlayerSerializeDB::PlayerSerializeDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSerializeDB::InitAsDefaultInstance() {
  pos_ = const_cast< ::ChenyuanTypes::PosSerializeDB*>(&::ChenyuanTypes::PosSerializeDB::default_instance());
}

PlayerSerializeDB::PlayerSerializeDB(const PlayerSerializeDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSerializeDB::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSerializeDB::~PlayerSerializeDB() {
  SharedDtor();
}

void PlayerSerializeDB::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlayerSerializeDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSerializeDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSerializeDB_descriptor_;
}

const PlayerSerializeDB& PlayerSerializeDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fChenyuanTypes_2eproto();
  return *default_instance_;
}

PlayerSerializeDB* PlayerSerializeDB::default_instance_ = NULL;

PlayerSerializeDB* PlayerSerializeDB::New() const {
  return new PlayerSerializeDB;
}

void PlayerSerializeDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roleid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ChenyuanTypes::PosSerializeDB::Clear();
    }
  }
  spelllist_.Clear();
  talentnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSerializeDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleId;
        break;
      }

      // required int32 RoleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pos;
        break;
      }

      // optional .ChenyuanTypes.PosSerializeDB Pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SpellList;
        break;
      }

      // repeated int32 SpellList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpellList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_spelllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_spelllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SpellList;
        if (input->ExpectTag(42)) goto parse_TalentNodes;
        break;
      }

      // repeated .ChenyuanTypes.TalentNodeSerializeDB TalentNodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TalentNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talentnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TalentNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSerializeDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 RoleId = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roleid(), output);
  }

  // optional .ChenyuanTypes.PosSerializeDB Pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated int32 SpellList = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->spelllist(i), output);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB TalentNodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->talentnodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSerializeDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 RoleId = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roleid(), target);
  }

  // optional .ChenyuanTypes.PosSerializeDB Pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated int32 SpellList = 4;
  for (int i = 0; i < this->spelllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->spelllist(i), target);
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB TalentNodes = 5;
  for (int i = 0; i < this->talentnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->talentnodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSerializeDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 RoleId = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional .ChenyuanTypes.PosSerializeDB Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  // repeated int32 SpellList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->spelllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->spelllist(i));
    }
    total_size += 1 * this->spelllist_size() + data_size;
  }

  // repeated .ChenyuanTypes.TalentNodeSerializeDB TalentNodes = 5;
  total_size += 1 * this->talentnodes_size();
  for (int i = 0; i < this->talentnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talentnodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSerializeDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSerializeDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSerializeDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSerializeDB::MergeFrom(const PlayerSerializeDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  spelllist_.MergeFrom(from.spelllist_);
  talentnodes_.MergeFrom(from.talentnodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_pos()) {
      mutable_pos()->::ChenyuanTypes::PosSerializeDB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSerializeDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSerializeDB::CopyFrom(const PlayerSerializeDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSerializeDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < talentnodes_size(); i++) {
    if (!this->talentnodes(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerSerializeDB::Swap(PlayerSerializeDB* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(roleid_, other->roleid_);
    std::swap(pos_, other->pos_);
    spelllist_.Swap(&other->spelllist_);
    talentnodes_.Swap(&other->talentnodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSerializeDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSerializeDB_descriptor_;
  metadata.reflection = PlayerSerializeDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChenyuanTypes

// @@protoc_insertion_point(global_scope)
