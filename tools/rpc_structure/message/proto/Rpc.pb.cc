// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RPCS {

namespace {

const ::google::protobuf::Descriptor* SRPCEquipEquipmentArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCEquipEquipmentArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCEquipEquipmentRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCEquipEquipmentRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCUnEquipEquipmentArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCUnEquipEquipmentArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCUnEquipEquipmentRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCUnEquipEquipmentRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCSellItemArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCSellItemArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCSellItemRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCSellItemRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCUseItemArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCUseItemArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCUseItemRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCUseItemRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCComposeItemArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCComposeItemArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCComposeItemRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCComposeItemRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCSortItemsArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCSortItemsArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRPCSortItemsRlt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRPCSortItemsRlt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRPCUpdateOneBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRPCUpdateOneBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRPCUpdateOneEquipedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRPCUpdateOneEquipedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CRPCUpdateBagItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CRPCUpdateBagItems_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fRpc_2eproto() {
  protobuf_AddDesc_proto_2fRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Rpc.proto");
  GOOGLE_CHECK(file != NULL);
  SRPCEquipEquipmentArg_descriptor_ = file->message_type(0);
  static const int SRPCEquipEquipmentArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentArg, itempos_),
  };
  SRPCEquipEquipmentArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCEquipEquipmentArg_descriptor_,
      SRPCEquipEquipmentArg::default_instance_,
      SRPCEquipEquipmentArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCEquipEquipmentArg));
  SRPCEquipEquipmentRlt_descriptor_ = file->message_type(1);
  static const int SRPCEquipEquipmentRlt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentRlt, rs_),
  };
  SRPCEquipEquipmentRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCEquipEquipmentRlt_descriptor_,
      SRPCEquipEquipmentRlt::default_instance_,
      SRPCEquipEquipmentRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCEquipEquipmentRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCEquipEquipmentRlt));
  SRPCUnEquipEquipmentArg_descriptor_ = file->message_type(2);
  static const int SRPCUnEquipEquipmentArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentArg, pos_),
  };
  SRPCUnEquipEquipmentArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCUnEquipEquipmentArg_descriptor_,
      SRPCUnEquipEquipmentArg::default_instance_,
      SRPCUnEquipEquipmentArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCUnEquipEquipmentArg));
  SRPCUnEquipEquipmentRlt_descriptor_ = file->message_type(3);
  static const int SRPCUnEquipEquipmentRlt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentRlt, rs_),
  };
  SRPCUnEquipEquipmentRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCUnEquipEquipmentRlt_descriptor_,
      SRPCUnEquipEquipmentRlt::default_instance_,
      SRPCUnEquipEquipmentRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUnEquipEquipmentRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCUnEquipEquipmentRlt));
  SRPCSellItemArg_descriptor_ = file->message_type(4);
  static const int SRPCSellItemArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemArg, itempos_),
  };
  SRPCSellItemArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCSellItemArg_descriptor_,
      SRPCSellItemArg::default_instance_,
      SRPCSellItemArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCSellItemArg));
  SRPCSellItemRlt_descriptor_ = file->message_type(5);
  static const int SRPCSellItemRlt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemRlt, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemRlt, badge_),
  };
  SRPCSellItemRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCSellItemRlt_descriptor_,
      SRPCSellItemRlt::default_instance_,
      SRPCSellItemRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSellItemRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCSellItemRlt));
  SRPCUseItemArg_descriptor_ = file->message_type(6);
  static const int SRPCUseItemArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemArg, pos_),
  };
  SRPCUseItemArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCUseItemArg_descriptor_,
      SRPCUseItemArg::default_instance_,
      SRPCUseItemArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCUseItemArg));
  SRPCUseItemRlt_descriptor_ = file->message_type(7);
  static const int SRPCUseItemRlt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemRlt, rs_),
  };
  SRPCUseItemRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCUseItemRlt_descriptor_,
      SRPCUseItemRlt::default_instance_,
      SRPCUseItemRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCUseItemRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCUseItemRlt));
  SRPCComposeItemArg_descriptor_ = file->message_type(8);
  static const int SRPCComposeItemArg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemArg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemArg, indexs_),
  };
  SRPCComposeItemArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCComposeItemArg_descriptor_,
      SRPCComposeItemArg::default_instance_,
      SRPCComposeItemArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCComposeItemArg));
  SRPCComposeItemRlt_descriptor_ = file->message_type(9);
  static const int SRPCComposeItemRlt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemRlt, rs_),
  };
  SRPCComposeItemRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCComposeItemRlt_descriptor_,
      SRPCComposeItemRlt::default_instance_,
      SRPCComposeItemRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCComposeItemRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCComposeItemRlt));
  SRPCSortItemsArg_descriptor_ = file->message_type(10);
  static const int SRPCSortItemsArg_offsets_[1] = {
  };
  SRPCSortItemsArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCSortItemsArg_descriptor_,
      SRPCSortItemsArg::default_instance_,
      SRPCSortItemsArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSortItemsArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSortItemsArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCSortItemsArg));
  SRPCSortItemsRlt_descriptor_ = file->message_type(11);
  static const int SRPCSortItemsRlt_offsets_[1] = {
  };
  SRPCSortItemsRlt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRPCSortItemsRlt_descriptor_,
      SRPCSortItemsRlt::default_instance_,
      SRPCSortItemsRlt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSortItemsRlt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRPCSortItemsRlt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRPCSortItemsRlt));
  CRPCUpdateOneBagItem_descriptor_ = file->message_type(12);
  static const int CRPCUpdateOneBagItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneBagItem, pos_),
  };
  CRPCUpdateOneBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRPCUpdateOneBagItem_descriptor_,
      CRPCUpdateOneBagItem::default_instance_,
      CRPCUpdateOneBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRPCUpdateOneBagItem));
  CRPCUpdateOneEquipedItem_descriptor_ = file->message_type(13);
  static const int CRPCUpdateOneEquipedItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneEquipedItem, pos_),
  };
  CRPCUpdateOneEquipedItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRPCUpdateOneEquipedItem_descriptor_,
      CRPCUpdateOneEquipedItem::default_instance_,
      CRPCUpdateOneEquipedItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneEquipedItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateOneEquipedItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRPCUpdateOneEquipedItem));
  CRPCUpdateBagItems_descriptor_ = file->message_type(14);
  static const int CRPCUpdateBagItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateBagItems, pos_),
  };
  CRPCUpdateBagItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CRPCUpdateBagItems_descriptor_,
      CRPCUpdateBagItems::default_instance_,
      CRPCUpdateBagItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateBagItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CRPCUpdateBagItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CRPCUpdateBagItems));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCEquipEquipmentArg_descriptor_, &SRPCEquipEquipmentArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCEquipEquipmentRlt_descriptor_, &SRPCEquipEquipmentRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCUnEquipEquipmentArg_descriptor_, &SRPCUnEquipEquipmentArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCUnEquipEquipmentRlt_descriptor_, &SRPCUnEquipEquipmentRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCSellItemArg_descriptor_, &SRPCSellItemArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCSellItemRlt_descriptor_, &SRPCSellItemRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCUseItemArg_descriptor_, &SRPCUseItemArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCUseItemRlt_descriptor_, &SRPCUseItemRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCComposeItemArg_descriptor_, &SRPCComposeItemArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCComposeItemRlt_descriptor_, &SRPCComposeItemRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCSortItemsArg_descriptor_, &SRPCSortItemsArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRPCSortItemsRlt_descriptor_, &SRPCSortItemsRlt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRPCUpdateOneBagItem_descriptor_, &CRPCUpdateOneBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRPCUpdateOneEquipedItem_descriptor_, &CRPCUpdateOneEquipedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CRPCUpdateBagItems_descriptor_, &CRPCUpdateBagItems::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fRpc_2eproto() {
  delete SRPCEquipEquipmentArg::default_instance_;
  delete SRPCEquipEquipmentArg_reflection_;
  delete SRPCEquipEquipmentRlt::default_instance_;
  delete SRPCEquipEquipmentRlt_reflection_;
  delete SRPCUnEquipEquipmentArg::default_instance_;
  delete SRPCUnEquipEquipmentArg_reflection_;
  delete SRPCUnEquipEquipmentRlt::default_instance_;
  delete SRPCUnEquipEquipmentRlt_reflection_;
  delete SRPCSellItemArg::default_instance_;
  delete SRPCSellItemArg_reflection_;
  delete SRPCSellItemRlt::default_instance_;
  delete SRPCSellItemRlt_reflection_;
  delete SRPCUseItemArg::default_instance_;
  delete SRPCUseItemArg_reflection_;
  delete SRPCUseItemRlt::default_instance_;
  delete SRPCUseItemRlt_reflection_;
  delete SRPCComposeItemArg::default_instance_;
  delete SRPCComposeItemArg_reflection_;
  delete SRPCComposeItemRlt::default_instance_;
  delete SRPCComposeItemRlt_reflection_;
  delete SRPCSortItemsArg::default_instance_;
  delete SRPCSortItemsArg_reflection_;
  delete SRPCSortItemsRlt::default_instance_;
  delete SRPCSortItemsRlt_reflection_;
  delete CRPCUpdateOneBagItem::default_instance_;
  delete CRPCUpdateOneBagItem_reflection_;
  delete CRPCUpdateOneEquipedItem::default_instance_;
  delete CRPCUpdateOneEquipedItem_reflection_;
  delete CRPCUpdateBagItems::default_instance_;
  delete CRPCUpdateBagItems_reflection_;
}

void protobuf_AddDesc_proto_2fRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017proto/Rpc.proto\022\004RPCS\"(\n\025SRPCEquipEqui"
    "pmentArg\022\017\n\007itempos\030\001 \002(\005\"#\n\025SRPCEquipEq"
    "uipmentRlt\022\n\n\002rs\030\001 \002(\005\"&\n\027SRPCUnEquipEqu"
    "ipmentArg\022\013\n\003pos\030\001 \002(\005\"%\n\027SRPCUnEquipEqu"
    "ipmentRlt\022\n\n\002rs\030\001 \002(\005\"\"\n\017SRPCSellItemArg"
    "\022\017\n\007itempos\030\001 \002(\005\"/\n\017SRPCSellItemRlt\022\r\n\005"
    "money\030\001 \002(\005\022\r\n\005badge\030\002 \002(\005\"\035\n\016SRPCUseIte"
    "mArg\022\013\n\003pos\030\001 \002(\005\"\034\n\016SRPCUseItemRlt\022\n\n\002r"
    "s\030\001 \002(\005\"2\n\022SRPCComposeItemArg\022\014\n\004type\030\001 "
    "\002(\005\022\016\n\006indexs\030\002 \003(\005\" \n\022SRPCComposeItemRl"
    "t\022\n\n\002rs\030\001 \002(\005\"\022\n\020SRPCSortItemsArg\"\022\n\020SRP"
    "CSortItemsRlt\"#\n\024CRPCUpdateOneBagItem\022\013\n"
    "\003pos\030\001 \002(\005\"\'\n\030CRPCUpdateOneEquipedItem\022\013"
    "\n\003pos\030\001 \002(\005\"!\n\022CRPCUpdateBagItems\022\013\n\003pos"
    "\030\001 \002(\005", 566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Rpc.proto", &protobuf_RegisterTypes);
  SRPCEquipEquipmentArg::default_instance_ = new SRPCEquipEquipmentArg();
  SRPCEquipEquipmentRlt::default_instance_ = new SRPCEquipEquipmentRlt();
  SRPCUnEquipEquipmentArg::default_instance_ = new SRPCUnEquipEquipmentArg();
  SRPCUnEquipEquipmentRlt::default_instance_ = new SRPCUnEquipEquipmentRlt();
  SRPCSellItemArg::default_instance_ = new SRPCSellItemArg();
  SRPCSellItemRlt::default_instance_ = new SRPCSellItemRlt();
  SRPCUseItemArg::default_instance_ = new SRPCUseItemArg();
  SRPCUseItemRlt::default_instance_ = new SRPCUseItemRlt();
  SRPCComposeItemArg::default_instance_ = new SRPCComposeItemArg();
  SRPCComposeItemRlt::default_instance_ = new SRPCComposeItemRlt();
  SRPCSortItemsArg::default_instance_ = new SRPCSortItemsArg();
  SRPCSortItemsRlt::default_instance_ = new SRPCSortItemsRlt();
  CRPCUpdateOneBagItem::default_instance_ = new CRPCUpdateOneBagItem();
  CRPCUpdateOneEquipedItem::default_instance_ = new CRPCUpdateOneEquipedItem();
  CRPCUpdateBagItems::default_instance_ = new CRPCUpdateBagItems();
  SRPCEquipEquipmentArg::default_instance_->InitAsDefaultInstance();
  SRPCEquipEquipmentRlt::default_instance_->InitAsDefaultInstance();
  SRPCUnEquipEquipmentArg::default_instance_->InitAsDefaultInstance();
  SRPCUnEquipEquipmentRlt::default_instance_->InitAsDefaultInstance();
  SRPCSellItemArg::default_instance_->InitAsDefaultInstance();
  SRPCSellItemRlt::default_instance_->InitAsDefaultInstance();
  SRPCUseItemArg::default_instance_->InitAsDefaultInstance();
  SRPCUseItemRlt::default_instance_->InitAsDefaultInstance();
  SRPCComposeItemArg::default_instance_->InitAsDefaultInstance();
  SRPCComposeItemRlt::default_instance_->InitAsDefaultInstance();
  SRPCSortItemsArg::default_instance_->InitAsDefaultInstance();
  SRPCSortItemsRlt::default_instance_->InitAsDefaultInstance();
  CRPCUpdateOneBagItem::default_instance_->InitAsDefaultInstance();
  CRPCUpdateOneEquipedItem::default_instance_->InitAsDefaultInstance();
  CRPCUpdateBagItems::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fRpc_2eproto {
  StaticDescriptorInitializer_proto_2fRpc_2eproto() {
    protobuf_AddDesc_proto_2fRpc_2eproto();
  }
} static_descriptor_initializer_proto_2fRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SRPCEquipEquipmentArg::kItemposFieldNumber;
#endif  // !_MSC_VER

SRPCEquipEquipmentArg::SRPCEquipEquipmentArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCEquipEquipmentArg::InitAsDefaultInstance() {
}

SRPCEquipEquipmentArg::SRPCEquipEquipmentArg(const SRPCEquipEquipmentArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCEquipEquipmentArg::SharedCtor() {
  _cached_size_ = 0;
  itempos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCEquipEquipmentArg::~SRPCEquipEquipmentArg() {
  SharedDtor();
}

void SRPCEquipEquipmentArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCEquipEquipmentArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCEquipEquipmentArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCEquipEquipmentArg_descriptor_;
}

const SRPCEquipEquipmentArg& SRPCEquipEquipmentArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCEquipEquipmentArg* SRPCEquipEquipmentArg::default_instance_ = NULL;

SRPCEquipEquipmentArg* SRPCEquipEquipmentArg::New() const {
  return new SRPCEquipEquipmentArg;
}

void SRPCEquipEquipmentArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itempos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCEquipEquipmentArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itempos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itempos_)));
          set_has_itempos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCEquipEquipmentArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itempos = 1;
  if (has_itempos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itempos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCEquipEquipmentArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itempos = 1;
  if (has_itempos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itempos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCEquipEquipmentArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itempos = 1;
    if (has_itempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itempos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCEquipEquipmentArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCEquipEquipmentArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCEquipEquipmentArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCEquipEquipmentArg::MergeFrom(const SRPCEquipEquipmentArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itempos()) {
      set_itempos(from.itempos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCEquipEquipmentArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCEquipEquipmentArg::CopyFrom(const SRPCEquipEquipmentArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCEquipEquipmentArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCEquipEquipmentArg::Swap(SRPCEquipEquipmentArg* other) {
  if (other != this) {
    std::swap(itempos_, other->itempos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCEquipEquipmentArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCEquipEquipmentArg_descriptor_;
  metadata.reflection = SRPCEquipEquipmentArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCEquipEquipmentRlt::kRsFieldNumber;
#endif  // !_MSC_VER

SRPCEquipEquipmentRlt::SRPCEquipEquipmentRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCEquipEquipmentRlt::InitAsDefaultInstance() {
}

SRPCEquipEquipmentRlt::SRPCEquipEquipmentRlt(const SRPCEquipEquipmentRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCEquipEquipmentRlt::SharedCtor() {
  _cached_size_ = 0;
  rs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCEquipEquipmentRlt::~SRPCEquipEquipmentRlt() {
  SharedDtor();
}

void SRPCEquipEquipmentRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCEquipEquipmentRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCEquipEquipmentRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCEquipEquipmentRlt_descriptor_;
}

const SRPCEquipEquipmentRlt& SRPCEquipEquipmentRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCEquipEquipmentRlt* SRPCEquipEquipmentRlt::default_instance_ = NULL;

SRPCEquipEquipmentRlt* SRPCEquipEquipmentRlt::New() const {
  return new SRPCEquipEquipmentRlt;
}

void SRPCEquipEquipmentRlt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCEquipEquipmentRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rs_)));
          set_has_rs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCEquipEquipmentRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rs = 1;
  if (has_rs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCEquipEquipmentRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rs = 1;
  if (has_rs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCEquipEquipmentRlt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rs = 1;
    if (has_rs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCEquipEquipmentRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCEquipEquipmentRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCEquipEquipmentRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCEquipEquipmentRlt::MergeFrom(const SRPCEquipEquipmentRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rs()) {
      set_rs(from.rs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCEquipEquipmentRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCEquipEquipmentRlt::CopyFrom(const SRPCEquipEquipmentRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCEquipEquipmentRlt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCEquipEquipmentRlt::Swap(SRPCEquipEquipmentRlt* other) {
  if (other != this) {
    std::swap(rs_, other->rs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCEquipEquipmentRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCEquipEquipmentRlt_descriptor_;
  metadata.reflection = SRPCEquipEquipmentRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCUnEquipEquipmentArg::kPosFieldNumber;
#endif  // !_MSC_VER

SRPCUnEquipEquipmentArg::SRPCUnEquipEquipmentArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCUnEquipEquipmentArg::InitAsDefaultInstance() {
}

SRPCUnEquipEquipmentArg::SRPCUnEquipEquipmentArg(const SRPCUnEquipEquipmentArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCUnEquipEquipmentArg::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCUnEquipEquipmentArg::~SRPCUnEquipEquipmentArg() {
  SharedDtor();
}

void SRPCUnEquipEquipmentArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCUnEquipEquipmentArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCUnEquipEquipmentArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCUnEquipEquipmentArg_descriptor_;
}

const SRPCUnEquipEquipmentArg& SRPCUnEquipEquipmentArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCUnEquipEquipmentArg* SRPCUnEquipEquipmentArg::default_instance_ = NULL;

SRPCUnEquipEquipmentArg* SRPCUnEquipEquipmentArg::New() const {
  return new SRPCUnEquipEquipmentArg;
}

void SRPCUnEquipEquipmentArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCUnEquipEquipmentArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCUnEquipEquipmentArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCUnEquipEquipmentArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCUnEquipEquipmentArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCUnEquipEquipmentArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCUnEquipEquipmentArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCUnEquipEquipmentArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCUnEquipEquipmentArg::MergeFrom(const SRPCUnEquipEquipmentArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCUnEquipEquipmentArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCUnEquipEquipmentArg::CopyFrom(const SRPCUnEquipEquipmentArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCUnEquipEquipmentArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCUnEquipEquipmentArg::Swap(SRPCUnEquipEquipmentArg* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCUnEquipEquipmentArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCUnEquipEquipmentArg_descriptor_;
  metadata.reflection = SRPCUnEquipEquipmentArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCUnEquipEquipmentRlt::kRsFieldNumber;
#endif  // !_MSC_VER

SRPCUnEquipEquipmentRlt::SRPCUnEquipEquipmentRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCUnEquipEquipmentRlt::InitAsDefaultInstance() {
}

SRPCUnEquipEquipmentRlt::SRPCUnEquipEquipmentRlt(const SRPCUnEquipEquipmentRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCUnEquipEquipmentRlt::SharedCtor() {
  _cached_size_ = 0;
  rs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCUnEquipEquipmentRlt::~SRPCUnEquipEquipmentRlt() {
  SharedDtor();
}

void SRPCUnEquipEquipmentRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCUnEquipEquipmentRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCUnEquipEquipmentRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCUnEquipEquipmentRlt_descriptor_;
}

const SRPCUnEquipEquipmentRlt& SRPCUnEquipEquipmentRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCUnEquipEquipmentRlt* SRPCUnEquipEquipmentRlt::default_instance_ = NULL;

SRPCUnEquipEquipmentRlt* SRPCUnEquipEquipmentRlt::New() const {
  return new SRPCUnEquipEquipmentRlt;
}

void SRPCUnEquipEquipmentRlt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCUnEquipEquipmentRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rs_)));
          set_has_rs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCUnEquipEquipmentRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rs = 1;
  if (has_rs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCUnEquipEquipmentRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rs = 1;
  if (has_rs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCUnEquipEquipmentRlt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rs = 1;
    if (has_rs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCUnEquipEquipmentRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCUnEquipEquipmentRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCUnEquipEquipmentRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCUnEquipEquipmentRlt::MergeFrom(const SRPCUnEquipEquipmentRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rs()) {
      set_rs(from.rs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCUnEquipEquipmentRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCUnEquipEquipmentRlt::CopyFrom(const SRPCUnEquipEquipmentRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCUnEquipEquipmentRlt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCUnEquipEquipmentRlt::Swap(SRPCUnEquipEquipmentRlt* other) {
  if (other != this) {
    std::swap(rs_, other->rs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCUnEquipEquipmentRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCUnEquipEquipmentRlt_descriptor_;
  metadata.reflection = SRPCUnEquipEquipmentRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCSellItemArg::kItemposFieldNumber;
#endif  // !_MSC_VER

SRPCSellItemArg::SRPCSellItemArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCSellItemArg::InitAsDefaultInstance() {
}

SRPCSellItemArg::SRPCSellItemArg(const SRPCSellItemArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCSellItemArg::SharedCtor() {
  _cached_size_ = 0;
  itempos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCSellItemArg::~SRPCSellItemArg() {
  SharedDtor();
}

void SRPCSellItemArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCSellItemArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCSellItemArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCSellItemArg_descriptor_;
}

const SRPCSellItemArg& SRPCSellItemArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCSellItemArg* SRPCSellItemArg::default_instance_ = NULL;

SRPCSellItemArg* SRPCSellItemArg::New() const {
  return new SRPCSellItemArg;
}

void SRPCSellItemArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itempos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCSellItemArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itempos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itempos_)));
          set_has_itempos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCSellItemArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itempos = 1;
  if (has_itempos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itempos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCSellItemArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itempos = 1;
  if (has_itempos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itempos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCSellItemArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itempos = 1;
    if (has_itempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itempos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCSellItemArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCSellItemArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCSellItemArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCSellItemArg::MergeFrom(const SRPCSellItemArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itempos()) {
      set_itempos(from.itempos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCSellItemArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCSellItemArg::CopyFrom(const SRPCSellItemArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCSellItemArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCSellItemArg::Swap(SRPCSellItemArg* other) {
  if (other != this) {
    std::swap(itempos_, other->itempos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCSellItemArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCSellItemArg_descriptor_;
  metadata.reflection = SRPCSellItemArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCSellItemRlt::kMoneyFieldNumber;
const int SRPCSellItemRlt::kBadgeFieldNumber;
#endif  // !_MSC_VER

SRPCSellItemRlt::SRPCSellItemRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCSellItemRlt::InitAsDefaultInstance() {
}

SRPCSellItemRlt::SRPCSellItemRlt(const SRPCSellItemRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCSellItemRlt::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  badge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCSellItemRlt::~SRPCSellItemRlt() {
  SharedDtor();
}

void SRPCSellItemRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCSellItemRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCSellItemRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCSellItemRlt_descriptor_;
}

const SRPCSellItemRlt& SRPCSellItemRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCSellItemRlt* SRPCSellItemRlt::default_instance_ = NULL;

SRPCSellItemRlt* SRPCSellItemRlt::New() const {
  return new SRPCSellItemRlt;
}

void SRPCSellItemRlt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
    badge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCSellItemRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_badge;
        break;
      }

      // required int32 badge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCSellItemRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // required int32 badge = 2;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCSellItemRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // required int32 badge = 2;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCSellItemRlt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 badge = 2;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCSellItemRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCSellItemRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCSellItemRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCSellItemRlt::MergeFrom(const SRPCSellItemRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCSellItemRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCSellItemRlt::CopyFrom(const SRPCSellItemRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCSellItemRlt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SRPCSellItemRlt::Swap(SRPCSellItemRlt* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCSellItemRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCSellItemRlt_descriptor_;
  metadata.reflection = SRPCSellItemRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCUseItemArg::kPosFieldNumber;
#endif  // !_MSC_VER

SRPCUseItemArg::SRPCUseItemArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCUseItemArg::InitAsDefaultInstance() {
}

SRPCUseItemArg::SRPCUseItemArg(const SRPCUseItemArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCUseItemArg::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCUseItemArg::~SRPCUseItemArg() {
  SharedDtor();
}

void SRPCUseItemArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCUseItemArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCUseItemArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCUseItemArg_descriptor_;
}

const SRPCUseItemArg& SRPCUseItemArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCUseItemArg* SRPCUseItemArg::default_instance_ = NULL;

SRPCUseItemArg* SRPCUseItemArg::New() const {
  return new SRPCUseItemArg;
}

void SRPCUseItemArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCUseItemArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCUseItemArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCUseItemArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCUseItemArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCUseItemArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCUseItemArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCUseItemArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCUseItemArg::MergeFrom(const SRPCUseItemArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCUseItemArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCUseItemArg::CopyFrom(const SRPCUseItemArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCUseItemArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCUseItemArg::Swap(SRPCUseItemArg* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCUseItemArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCUseItemArg_descriptor_;
  metadata.reflection = SRPCUseItemArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCUseItemRlt::kRsFieldNumber;
#endif  // !_MSC_VER

SRPCUseItemRlt::SRPCUseItemRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCUseItemRlt::InitAsDefaultInstance() {
}

SRPCUseItemRlt::SRPCUseItemRlt(const SRPCUseItemRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCUseItemRlt::SharedCtor() {
  _cached_size_ = 0;
  rs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCUseItemRlt::~SRPCUseItemRlt() {
  SharedDtor();
}

void SRPCUseItemRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCUseItemRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCUseItemRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCUseItemRlt_descriptor_;
}

const SRPCUseItemRlt& SRPCUseItemRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCUseItemRlt* SRPCUseItemRlt::default_instance_ = NULL;

SRPCUseItemRlt* SRPCUseItemRlt::New() const {
  return new SRPCUseItemRlt;
}

void SRPCUseItemRlt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCUseItemRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rs_)));
          set_has_rs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCUseItemRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rs = 1;
  if (has_rs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCUseItemRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rs = 1;
  if (has_rs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCUseItemRlt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rs = 1;
    if (has_rs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCUseItemRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCUseItemRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCUseItemRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCUseItemRlt::MergeFrom(const SRPCUseItemRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rs()) {
      set_rs(from.rs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCUseItemRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCUseItemRlt::CopyFrom(const SRPCUseItemRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCUseItemRlt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCUseItemRlt::Swap(SRPCUseItemRlt* other) {
  if (other != this) {
    std::swap(rs_, other->rs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCUseItemRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCUseItemRlt_descriptor_;
  metadata.reflection = SRPCUseItemRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCComposeItemArg::kTypeFieldNumber;
const int SRPCComposeItemArg::kIndexsFieldNumber;
#endif  // !_MSC_VER

SRPCComposeItemArg::SRPCComposeItemArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCComposeItemArg::InitAsDefaultInstance() {
}

SRPCComposeItemArg::SRPCComposeItemArg(const SRPCComposeItemArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCComposeItemArg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCComposeItemArg::~SRPCComposeItemArg() {
  SharedDtor();
}

void SRPCComposeItemArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCComposeItemArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCComposeItemArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCComposeItemArg_descriptor_;
}

const SRPCComposeItemArg& SRPCComposeItemArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCComposeItemArg* SRPCComposeItemArg::default_instance_ = NULL;

SRPCComposeItemArg* SRPCComposeItemArg::New() const {
  return new SRPCComposeItemArg;
}

void SRPCComposeItemArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCComposeItemArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_indexs;
        break;
      }

      // repeated int32 indexs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCComposeItemArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 indexs = 2;
  for (int i = 0; i < this->indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCComposeItemArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 indexs = 2;
  for (int i = 0; i < this->indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCComposeItemArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 indexs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indexs(i));
    }
    total_size += 1 * this->indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCComposeItemArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCComposeItemArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCComposeItemArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCComposeItemArg::MergeFrom(const SRPCComposeItemArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  indexs_.MergeFrom(from.indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCComposeItemArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCComposeItemArg::CopyFrom(const SRPCComposeItemArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCComposeItemArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCComposeItemArg::Swap(SRPCComposeItemArg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    indexs_.Swap(&other->indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCComposeItemArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCComposeItemArg_descriptor_;
  metadata.reflection = SRPCComposeItemArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRPCComposeItemRlt::kRsFieldNumber;
#endif  // !_MSC_VER

SRPCComposeItemRlt::SRPCComposeItemRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCComposeItemRlt::InitAsDefaultInstance() {
}

SRPCComposeItemRlt::SRPCComposeItemRlt(const SRPCComposeItemRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCComposeItemRlt::SharedCtor() {
  _cached_size_ = 0;
  rs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCComposeItemRlt::~SRPCComposeItemRlt() {
  SharedDtor();
}

void SRPCComposeItemRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCComposeItemRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCComposeItemRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCComposeItemRlt_descriptor_;
}

const SRPCComposeItemRlt& SRPCComposeItemRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCComposeItemRlt* SRPCComposeItemRlt::default_instance_ = NULL;

SRPCComposeItemRlt* SRPCComposeItemRlt::New() const {
  return new SRPCComposeItemRlt;
}

void SRPCComposeItemRlt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCComposeItemRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rs_)));
          set_has_rs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRPCComposeItemRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rs = 1;
  if (has_rs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCComposeItemRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rs = 1;
  if (has_rs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCComposeItemRlt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rs = 1;
    if (has_rs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCComposeItemRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCComposeItemRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCComposeItemRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCComposeItemRlt::MergeFrom(const SRPCComposeItemRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rs()) {
      set_rs(from.rs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCComposeItemRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCComposeItemRlt::CopyFrom(const SRPCComposeItemRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCComposeItemRlt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRPCComposeItemRlt::Swap(SRPCComposeItemRlt* other) {
  if (other != this) {
    std::swap(rs_, other->rs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCComposeItemRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCComposeItemRlt_descriptor_;
  metadata.reflection = SRPCComposeItemRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SRPCSortItemsArg::SRPCSortItemsArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCSortItemsArg::InitAsDefaultInstance() {
}

SRPCSortItemsArg::SRPCSortItemsArg(const SRPCSortItemsArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCSortItemsArg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCSortItemsArg::~SRPCSortItemsArg() {
  SharedDtor();
}

void SRPCSortItemsArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCSortItemsArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCSortItemsArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCSortItemsArg_descriptor_;
}

const SRPCSortItemsArg& SRPCSortItemsArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCSortItemsArg* SRPCSortItemsArg::default_instance_ = NULL;

SRPCSortItemsArg* SRPCSortItemsArg::New() const {
  return new SRPCSortItemsArg;
}

void SRPCSortItemsArg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCSortItemsArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SRPCSortItemsArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCSortItemsArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCSortItemsArg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCSortItemsArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCSortItemsArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCSortItemsArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCSortItemsArg::MergeFrom(const SRPCSortItemsArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCSortItemsArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCSortItemsArg::CopyFrom(const SRPCSortItemsArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCSortItemsArg::IsInitialized() const {

  return true;
}

void SRPCSortItemsArg::Swap(SRPCSortItemsArg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCSortItemsArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCSortItemsArg_descriptor_;
  metadata.reflection = SRPCSortItemsArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SRPCSortItemsRlt::SRPCSortItemsRlt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRPCSortItemsRlt::InitAsDefaultInstance() {
}

SRPCSortItemsRlt::SRPCSortItemsRlt(const SRPCSortItemsRlt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRPCSortItemsRlt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRPCSortItemsRlt::~SRPCSortItemsRlt() {
  SharedDtor();
}

void SRPCSortItemsRlt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRPCSortItemsRlt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRPCSortItemsRlt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRPCSortItemsRlt_descriptor_;
}

const SRPCSortItemsRlt& SRPCSortItemsRlt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

SRPCSortItemsRlt* SRPCSortItemsRlt::default_instance_ = NULL;

SRPCSortItemsRlt* SRPCSortItemsRlt::New() const {
  return new SRPCSortItemsRlt;
}

void SRPCSortItemsRlt::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRPCSortItemsRlt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SRPCSortItemsRlt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRPCSortItemsRlt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRPCSortItemsRlt::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRPCSortItemsRlt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRPCSortItemsRlt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRPCSortItemsRlt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRPCSortItemsRlt::MergeFrom(const SRPCSortItemsRlt& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRPCSortItemsRlt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRPCSortItemsRlt::CopyFrom(const SRPCSortItemsRlt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRPCSortItemsRlt::IsInitialized() const {

  return true;
}

void SRPCSortItemsRlt::Swap(SRPCSortItemsRlt* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRPCSortItemsRlt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRPCSortItemsRlt_descriptor_;
  metadata.reflection = SRPCSortItemsRlt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRPCUpdateOneBagItem::kPosFieldNumber;
#endif  // !_MSC_VER

CRPCUpdateOneBagItem::CRPCUpdateOneBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRPCUpdateOneBagItem::InitAsDefaultInstance() {
}

CRPCUpdateOneBagItem::CRPCUpdateOneBagItem(const CRPCUpdateOneBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRPCUpdateOneBagItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRPCUpdateOneBagItem::~CRPCUpdateOneBagItem() {
  SharedDtor();
}

void CRPCUpdateOneBagItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRPCUpdateOneBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPCUpdateOneBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRPCUpdateOneBagItem_descriptor_;
}

const CRPCUpdateOneBagItem& CRPCUpdateOneBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

CRPCUpdateOneBagItem* CRPCUpdateOneBagItem::default_instance_ = NULL;

CRPCUpdateOneBagItem* CRPCUpdateOneBagItem::New() const {
  return new CRPCUpdateOneBagItem;
}

void CRPCUpdateOneBagItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRPCUpdateOneBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRPCUpdateOneBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRPCUpdateOneBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRPCUpdateOneBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPCUpdateOneBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRPCUpdateOneBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRPCUpdateOneBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRPCUpdateOneBagItem::MergeFrom(const CRPCUpdateOneBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRPCUpdateOneBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPCUpdateOneBagItem::CopyFrom(const CRPCUpdateOneBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPCUpdateOneBagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRPCUpdateOneBagItem::Swap(CRPCUpdateOneBagItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRPCUpdateOneBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRPCUpdateOneBagItem_descriptor_;
  metadata.reflection = CRPCUpdateOneBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRPCUpdateOneEquipedItem::kPosFieldNumber;
#endif  // !_MSC_VER

CRPCUpdateOneEquipedItem::CRPCUpdateOneEquipedItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRPCUpdateOneEquipedItem::InitAsDefaultInstance() {
}

CRPCUpdateOneEquipedItem::CRPCUpdateOneEquipedItem(const CRPCUpdateOneEquipedItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRPCUpdateOneEquipedItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRPCUpdateOneEquipedItem::~CRPCUpdateOneEquipedItem() {
  SharedDtor();
}

void CRPCUpdateOneEquipedItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRPCUpdateOneEquipedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPCUpdateOneEquipedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRPCUpdateOneEquipedItem_descriptor_;
}

const CRPCUpdateOneEquipedItem& CRPCUpdateOneEquipedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

CRPCUpdateOneEquipedItem* CRPCUpdateOneEquipedItem::default_instance_ = NULL;

CRPCUpdateOneEquipedItem* CRPCUpdateOneEquipedItem::New() const {
  return new CRPCUpdateOneEquipedItem;
}

void CRPCUpdateOneEquipedItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRPCUpdateOneEquipedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRPCUpdateOneEquipedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRPCUpdateOneEquipedItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRPCUpdateOneEquipedItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPCUpdateOneEquipedItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRPCUpdateOneEquipedItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRPCUpdateOneEquipedItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRPCUpdateOneEquipedItem::MergeFrom(const CRPCUpdateOneEquipedItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRPCUpdateOneEquipedItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPCUpdateOneEquipedItem::CopyFrom(const CRPCUpdateOneEquipedItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPCUpdateOneEquipedItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRPCUpdateOneEquipedItem::Swap(CRPCUpdateOneEquipedItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRPCUpdateOneEquipedItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRPCUpdateOneEquipedItem_descriptor_;
  metadata.reflection = CRPCUpdateOneEquipedItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CRPCUpdateBagItems::kPosFieldNumber;
#endif  // !_MSC_VER

CRPCUpdateBagItems::CRPCUpdateBagItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CRPCUpdateBagItems::InitAsDefaultInstance() {
}

CRPCUpdateBagItems::CRPCUpdateBagItems(const CRPCUpdateBagItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CRPCUpdateBagItems::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CRPCUpdateBagItems::~CRPCUpdateBagItems() {
  SharedDtor();
}

void CRPCUpdateBagItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CRPCUpdateBagItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CRPCUpdateBagItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CRPCUpdateBagItems_descriptor_;
}

const CRPCUpdateBagItems& CRPCUpdateBagItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fRpc_2eproto();
  return *default_instance_;
}

CRPCUpdateBagItems* CRPCUpdateBagItems::default_instance_ = NULL;

CRPCUpdateBagItems* CRPCUpdateBagItems::New() const {
  return new CRPCUpdateBagItems;
}

void CRPCUpdateBagItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CRPCUpdateBagItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CRPCUpdateBagItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CRPCUpdateBagItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CRPCUpdateBagItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CRPCUpdateBagItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CRPCUpdateBagItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CRPCUpdateBagItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CRPCUpdateBagItems::MergeFrom(const CRPCUpdateBagItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CRPCUpdateBagItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRPCUpdateBagItems::CopyFrom(const CRPCUpdateBagItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRPCUpdateBagItems::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CRPCUpdateBagItems::Swap(CRPCUpdateBagItems* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CRPCUpdateBagItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CRPCUpdateBagItems_descriptor_;
  metadata.reflection = CRPCUpdateBagItems_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPCS

// @@protoc_insertion_point(global_scope)
