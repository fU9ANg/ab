// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SerializeBaseObject.proto

#ifndef PROTOBUF_proto_2fSerializeBaseObject_2eproto__INCLUDED
#define PROTOBUF_proto_2fSerializeBaseObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace content {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto();
void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto();

class tkPlayerSerializeDB;
class tkRoleSerializeDB;
class tkCreatureSerializeDB;
class tkBufferSerializeDB;

// ===================================================================

class tkPlayerSerializeDB : public ::google::protobuf::Message {
 public:
  tkPlayerSerializeDB();
  virtual ~tkPlayerSerializeDB();

  tkPlayerSerializeDB(const tkPlayerSerializeDB& from);

  inline tkPlayerSerializeDB& operator=(const tkPlayerSerializeDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tkPlayerSerializeDB& default_instance();

  void Swap(tkPlayerSerializeDB* other);

  // implements Message ----------------------------------------------

  tkPlayerSerializeDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tkPlayerSerializeDB& from);
  void MergeFrom(const tkPlayerSerializeDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1 [default = 1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .content.tkRoleSerializeDB roles = 2;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 2;
  inline const ::content::tkRoleSerializeDB& roles(int index) const;
  inline ::content::tkRoleSerializeDB* mutable_roles(int index);
  inline ::content::tkRoleSerializeDB* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::content::tkRoleSerializeDB >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::content::tkRoleSerializeDB >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:content.tkPlayerSerializeDB)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::content::tkRoleSerializeDB > roles_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto();

  void InitAsDefaultInstance();
  static tkPlayerSerializeDB* default_instance_;
};
// -------------------------------------------------------------------

class tkRoleSerializeDB : public ::google::protobuf::Message {
 public:
  tkRoleSerializeDB();
  virtual ~tkRoleSerializeDB();

  tkRoleSerializeDB(const tkRoleSerializeDB& from);

  inline tkRoleSerializeDB& operator=(const tkRoleSerializeDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tkRoleSerializeDB& default_instance();

  void Swap(tkRoleSerializeDB* other);

  // implements Message ----------------------------------------------

  tkRoleSerializeDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tkRoleSerializeDB& from);
  void MergeFrom(const tkRoleSerializeDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .content.tkCreatureSerializeDB creature = 2;
  inline bool has_creature() const;
  inline void clear_creature();
  static const int kCreatureFieldNumber = 2;
  inline const ::content::tkCreatureSerializeDB& creature() const;
  inline ::content::tkCreatureSerializeDB* mutable_creature();
  inline ::content::tkCreatureSerializeDB* release_creature();
  inline void set_allocated_creature(::content::tkCreatureSerializeDB* creature);

  // repeated .content.tkBufferSerializeDB buffer = 3;
  inline int buffer_size() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 3;
  inline const ::content::tkBufferSerializeDB& buffer(int index) const;
  inline ::content::tkBufferSerializeDB* mutable_buffer(int index);
  inline ::content::tkBufferSerializeDB* add_buffer();
  inline const ::google::protobuf::RepeatedPtrField< ::content::tkBufferSerializeDB >&
      buffer() const;
  inline ::google::protobuf::RepeatedPtrField< ::content::tkBufferSerializeDB >*
      mutable_buffer();

  // @@protoc_insertion_point(class_scope:content.tkRoleSerializeDB)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_creature();
  inline void clear_has_creature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::content::tkCreatureSerializeDB* creature_;
  ::google::protobuf::RepeatedPtrField< ::content::tkBufferSerializeDB > buffer_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto();

  void InitAsDefaultInstance();
  static tkRoleSerializeDB* default_instance_;
};
// -------------------------------------------------------------------

class tkCreatureSerializeDB : public ::google::protobuf::Message {
 public:
  tkCreatureSerializeDB();
  virtual ~tkCreatureSerializeDB();

  tkCreatureSerializeDB(const tkCreatureSerializeDB& from);

  inline tkCreatureSerializeDB& operator=(const tkCreatureSerializeDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tkCreatureSerializeDB& default_instance();

  void Swap(tkCreatureSerializeDB* other);

  // implements Message ----------------------------------------------

  tkCreatureSerializeDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tkCreatureSerializeDB& from);
  void MergeFrom(const tkCreatureSerializeDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 creatureid = 1;
  inline bool has_creatureid() const;
  inline void clear_creatureid();
  static const int kCreatureidFieldNumber = 1;
  inline ::google::protobuf::int32 creatureid() const;
  inline void set_creatureid(::google::protobuf::int32 value);

  // required int64 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:content.tkCreatureSerializeDB)
 private:
  inline void set_has_creatureid();
  inline void clear_has_creatureid();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hp_;
  ::google::protobuf::int32 creatureid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto();

  void InitAsDefaultInstance();
  static tkCreatureSerializeDB* default_instance_;
};
// -------------------------------------------------------------------

class tkBufferSerializeDB : public ::google::protobuf::Message {
 public:
  tkBufferSerializeDB();
  virtual ~tkBufferSerializeDB();

  tkBufferSerializeDB(const tkBufferSerializeDB& from);

  inline tkBufferSerializeDB& operator=(const tkBufferSerializeDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tkBufferSerializeDB& default_instance();

  void Swap(tkBufferSerializeDB* other);

  // implements Message ----------------------------------------------

  tkBufferSerializeDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tkBufferSerializeDB& from);
  void MergeFrom(const tkBufferSerializeDB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bufferid = 1;
  inline bool has_bufferid() const;
  inline void clear_bufferid();
  static const int kBufferidFieldNumber = 1;
  inline ::google::protobuf::int32 bufferid() const;
  inline void set_bufferid(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:content.tkBufferSerializeDB)
 private:
  inline void set_has_bufferid();
  inline void clear_has_bufferid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bufferid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_AssignDesc_proto_2fSerializeBaseObject_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSerializeBaseObject_2eproto();

  void InitAsDefaultInstance();
  static tkBufferSerializeDB* default_instance_;
};
// ===================================================================


// ===================================================================

// tkPlayerSerializeDB

// required int32 id = 1 [default = 1];
inline bool tkPlayerSerializeDB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tkPlayerSerializeDB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tkPlayerSerializeDB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tkPlayerSerializeDB::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::google::protobuf::int32 tkPlayerSerializeDB::id() const {
  return id_;
}
inline void tkPlayerSerializeDB::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .content.tkRoleSerializeDB roles = 2;
inline int tkPlayerSerializeDB::roles_size() const {
  return roles_.size();
}
inline void tkPlayerSerializeDB::clear_roles() {
  roles_.Clear();
}
inline const ::content::tkRoleSerializeDB& tkPlayerSerializeDB::roles(int index) const {
  return roles_.Get(index);
}
inline ::content::tkRoleSerializeDB* tkPlayerSerializeDB::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::content::tkRoleSerializeDB* tkPlayerSerializeDB::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::content::tkRoleSerializeDB >&
tkPlayerSerializeDB::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::content::tkRoleSerializeDB >*
tkPlayerSerializeDB::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// tkRoleSerializeDB

// required int32 id = 1;
inline bool tkRoleSerializeDB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tkRoleSerializeDB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tkRoleSerializeDB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tkRoleSerializeDB::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 tkRoleSerializeDB::id() const {
  return id_;
}
inline void tkRoleSerializeDB::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .content.tkCreatureSerializeDB creature = 2;
inline bool tkRoleSerializeDB::has_creature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tkRoleSerializeDB::set_has_creature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tkRoleSerializeDB::clear_has_creature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tkRoleSerializeDB::clear_creature() {
  if (creature_ != NULL) creature_->::content::tkCreatureSerializeDB::Clear();
  clear_has_creature();
}
inline const ::content::tkCreatureSerializeDB& tkRoleSerializeDB::creature() const {
  return creature_ != NULL ? *creature_ : *default_instance_->creature_;
}
inline ::content::tkCreatureSerializeDB* tkRoleSerializeDB::mutable_creature() {
  set_has_creature();
  if (creature_ == NULL) creature_ = new ::content::tkCreatureSerializeDB;
  return creature_;
}
inline ::content::tkCreatureSerializeDB* tkRoleSerializeDB::release_creature() {
  clear_has_creature();
  ::content::tkCreatureSerializeDB* temp = creature_;
  creature_ = NULL;
  return temp;
}
inline void tkRoleSerializeDB::set_allocated_creature(::content::tkCreatureSerializeDB* creature) {
  delete creature_;
  creature_ = creature;
  if (creature) {
    set_has_creature();
  } else {
    clear_has_creature();
  }
}

// repeated .content.tkBufferSerializeDB buffer = 3;
inline int tkRoleSerializeDB::buffer_size() const {
  return buffer_.size();
}
inline void tkRoleSerializeDB::clear_buffer() {
  buffer_.Clear();
}
inline const ::content::tkBufferSerializeDB& tkRoleSerializeDB::buffer(int index) const {
  return buffer_.Get(index);
}
inline ::content::tkBufferSerializeDB* tkRoleSerializeDB::mutable_buffer(int index) {
  return buffer_.Mutable(index);
}
inline ::content::tkBufferSerializeDB* tkRoleSerializeDB::add_buffer() {
  return buffer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::content::tkBufferSerializeDB >&
tkRoleSerializeDB::buffer() const {
  return buffer_;
}
inline ::google::protobuf::RepeatedPtrField< ::content::tkBufferSerializeDB >*
tkRoleSerializeDB::mutable_buffer() {
  return &buffer_;
}

// -------------------------------------------------------------------

// tkCreatureSerializeDB

// required int32 creatureid = 1;
inline bool tkCreatureSerializeDB::has_creatureid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tkCreatureSerializeDB::set_has_creatureid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tkCreatureSerializeDB::clear_has_creatureid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tkCreatureSerializeDB::clear_creatureid() {
  creatureid_ = 0;
  clear_has_creatureid();
}
inline ::google::protobuf::int32 tkCreatureSerializeDB::creatureid() const {
  return creatureid_;
}
inline void tkCreatureSerializeDB::set_creatureid(::google::protobuf::int32 value) {
  set_has_creatureid();
  creatureid_ = value;
}

// required int64 hp = 2;
inline bool tkCreatureSerializeDB::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tkCreatureSerializeDB::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tkCreatureSerializeDB::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tkCreatureSerializeDB::clear_hp() {
  hp_ = GOOGLE_LONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::int64 tkCreatureSerializeDB::hp() const {
  return hp_;
}
inline void tkCreatureSerializeDB::set_hp(::google::protobuf::int64 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// tkBufferSerializeDB

// required int32 bufferid = 1;
inline bool tkBufferSerializeDB::has_bufferid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tkBufferSerializeDB::set_has_bufferid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tkBufferSerializeDB::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tkBufferSerializeDB::clear_bufferid() {
  bufferid_ = 0;
  clear_has_bufferid();
}
inline ::google::protobuf::int32 tkBufferSerializeDB::bufferid() const {
  return bufferid_;
}
inline void tkBufferSerializeDB::set_bufferid(::google::protobuf::int32 value) {
  set_has_bufferid();
  bufferid_ = value;
}

// required int32 type = 2;
inline bool tkBufferSerializeDB::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tkBufferSerializeDB::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tkBufferSerializeDB::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tkBufferSerializeDB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 tkBufferSerializeDB::type() const {
  return type_;
}
inline void tkBufferSerializeDB::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fSerializeBaseObject_2eproto__INCLUDED
